<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL系统配置优化指南</title>
      <link href="/blog/2025/09/14/MySQL%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/"/>
      <url>/blog/2025/09/14/MySQL%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="一、核心优化思路"><a href="#一、核心优化思路" class="headerlink" title="一、核心优化思路"></a>一、核心优化思路</h1><p>在动手修改配置之前，务必明确以下几点：</p><ol><li><p>没有“万能配置”：最优配置取决于您的硬件资源（CPU、内存、磁盘类型）、工作负载（OLTP 在线事务处理 &#x2F; OLAP 在线分析处理）、数据大小和访问模式。</p></li><li><p>循序渐进：每次只修改一个或少数几个参数，观察效果后再进行下一步调整。</p></li><li><p>监控先行：使用监控工具（如 SHOW GLOBAL STATUS、SHOW ENGINE INNODB STATUS、Percona Monitoring and Management, Prometheus + Grafana 等）来定位瓶颈。不要盲目调整。</p></li><li><p>理解参数含义：知其然知其所以然，避免误操作导致性能下降或不稳定。</p></li></ol><h1 id="二、核心配置文件（my-cnf-my-ini）关键参数详解"><a href="#二、核心配置文件（my-cnf-my-ini）关键参数详解" class="headerlink" title="二、核心配置文件（my.cnf &#x2F; my.ini）关键参数详解"></a>二、核心配置文件（my.cnf &#x2F; my.ini）关键参数详解</h1><p>我们主要针对最常用的 InnoDB 存储引擎进行优化。</p><ol><li>连接相关（Connections）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 最大连接数。防止过多连接耗尽资源。根据应用需求和系统承载能力设置。</span><br><span class="line">max_connections = 500</span><br><span class="line"></span><br><span class="line"># 每个连接的内存缓冲区大小。避免设置过大导致内存溢出（OOM）。</span><br><span class="line">sort_buffer_size = 2M</span><br><span class="line">read_buffer_size = 2M</span><br><span class="line">read_rnd_buffer_size = 2M</span><br><span class="line">join_buffer_size = 2M</span><br><span class="line">thread_stack = 256K</span><br></pre></td></tr></table></figure><blockquote><p>建议：对于拥有数百个连接的服务器，这些每个连接的缓冲区是主要的内存消耗者。应保守设置。</p></blockquote><ol start="2"><li>内存利用相关（Memory Utilization） - 最关键的部分</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># InnoDB 缓冲池大小 - 这是最重要的参数！</span><br><span class="line"># 它用于缓存表数据、索引、缓冲写操作。通常设置为系统总内存的 50%-80%（专用于MySQL的情况下）。</span><br><span class="line"># 例如，拥有 16G 内存的数据库服务器，可以设置为 10G-12G。</span><br><span class="line">innodb_buffer_pool_size = 12G</span><br><span class="line"></span><br><span class="line"># InnoDB 日志文件大小 - 同样非常重要！</span><br><span class="line"># 更大的日志文件可以减少磁盘I/O，提高写性能，但会延长崩溃恢复时间。</span><br><span class="line"># 通常建议每个日志文件设置为 1G-4G。两个文件（ib_logfile0, ib_logfile1）总大小即为 2G-8G。</span><br><span class="line">innodb_log_file_size = 2G</span><br><span class="line">innodb_log_files_in_group = 2  # 默认是2，通常不需要改</span><br><span class="line"></span><br><span class="line"># 缓冲池实例数。当 innodb_buffer_pool_size &gt;= 8G 时，设置为多个可以提高并发性。</span><br><span class="line"># 通常建议设置为 CPU 核心数或缓冲池大小（GB）的 1/4 到 1/8。</span><br><span class="line">innodb_buffer_pool_instances = 8</span><br><span class="line"></span><br><span class="line"># 查询缓存 (MySQL 5.7 及之前版本)。在高并发写环境下，查询缓存可能成为瓶颈，通常建议禁用。</span><br><span class="line"># 注意：MySQL 8.0 已彻底移除查询缓存功能。</span><br><span class="line">query_cache_type = 0</span><br><span class="line">query_cache_size = 0</span><br></pre></td></tr></table></figure><ol start="3"><li>日志与持久化相关（Logging &amp; Durability）<br>这需要在性能和数据安全之间做权衡。</li></ol><ul><li>安全优先配置（ACID 合规）：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 每个事务都刷盘，最安全，但性能最低。</span><br><span class="line">innodb_flush_log_at_trx_commit = 1</span><br><span class="line">sync_binlog = 1</span><br></pre></td></tr></table></figure></li><li>性能优先配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 每秒刷一次日志到磁盘，性能更好。在操作系统或MySQL崩溃时最多丢失1秒的数据。</span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line"># 将 N 个二进制日志事件组提交后刷盘。可以设置为 100-1000 之间的值。</span><br><span class="line">sync_binlog = 1000</span><br></pre></td></tr></table></figure></li><li>通用折中配置：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 每次事务提交都刷盘，但利用磁盘的写缓存（需要保证磁盘有电池备份缓存BBWC/WC，否则断电仍会丢数据）。</span><br><span class="line">innodb_flush_log_at_trx_commit = 1</span><br><span class="line">sync_binlog = 1000</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>I&#x2F;O 相关（I&#x2F;O Settings）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 控制InnoDB表空间文件的打开方式。设置为1表示所有表共享一个表空间，0表示每个表一个文件(.ibd)。</span><br><span class="line"># 建议设置为0（独立表空间），便于管理、备份和恢复，并且可以回收磁盘空间。</span><br><span class="line">innodb_file_per_table = ON</span><br><span class="line"></span><br><span class="line"># InnoDB 读写线程数。对于多核CPU和SSD磁盘，增加此值可以提高I/O性能。</span><br><span class="line">innodb_read_io_threads = 8</span><br><span class="line">innodb_write_io_threads = 4</span><br><span class="line"></span><br><span class="line"># 刷新脏页到磁盘的算法。对于现代SSD和高速硬盘，建议使用 `O_DIRECT` 以避免双重缓冲。</span><br><span class="line">innodb_flush_method = O_DIRECT</span><br></pre></td></tr></table></figure><ol start="5"><li>其他重要参数（Miscellaneous）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 临时表大小。如果复杂查询多，可以适当增大以防止磁盘临时表创建（磁盘临时表很慢）。</span><br><span class="line">tmp_table_size = 64M</span><br><span class="line">max_heap_table_size = 64M</span><br><span class="line"></span><br><span class="line"># 允许的最大数据包大小。如果需要处理大字段（如BLOB, TEXT）或长字符串，需要增大此值。</span><br><span class="line">max_allowed_packet = 256M</span><br><span class="line"></span><br><span class="line"># 服务器字符集，建议使用utf8mb4以完全支持Emoji等所有Unicode字符。</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line"># 禁用DNS反向解析，可以加快连接速度。</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure><h1 id="三、配置模板示例"><a href="#三、配置模板示例" class="headerlink" title="三、配置模板示例"></a>三、配置模板示例</h1><p>场景一：中等负载，16GB RAM，SSD 磁盘的 OLTP 系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># Connection Settings</span><br><span class="line">max_connections = 500</span><br><span class="line">thread_cache_size = 50</span><br><span class="line"></span><br><span class="line"># Memory Settings</span><br><span class="line">innodb_buffer_pool_size = 12G</span><br><span class="line">innodb_buffer_pool_instances = 8</span><br><span class="line">innodb_log_file_size = 2G</span><br><span class="line">join_buffer_size = 2M</span><br><span class="line">sort_buffer_size = 2M</span><br><span class="line">read_buffer_size = 2M</span><br><span class="line">read_rnd_buffer_size = 2M</span><br><span class="line"></span><br><span class="line"># Logging and Durability (A balance between performance and safety)</span><br><span class="line">innodb_flush_log_at_trx_commit = 1</span><br><span class="line">sync_binlog = 1000</span><br><span class="line"></span><br><span class="line"># I/O Settings</span><br><span class="line">innodb_file_per_table = ON</span><br><span class="line">innodb_flush_method = O_DIRECT</span><br><span class="line">innodb_read_io_threads = 8</span><br><span class="line">innodb_write_io_threads = 4</span><br><span class="line"></span><br><span class="line"># Other Settings</span><br><span class="line">tmp_table_size = 64M</span><br><span class="line">max_heap_table_size = 64M</span><br><span class="line">max_allowed_packet = 256M</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_unicode_ci</span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line"># Error Logging (Optional)</span><br><span class="line">log_error = /var/log/mysql/mysql-error.log</span><br><span class="line">slow_query_log = ON</span><br><span class="line">slow_query_log_file = /var/log/mysql/mysql-slow.log</span><br><span class="line">long_query_time = 2  # 记录执行时间超过2秒的查询</span><br></pre></td></tr></table></figure><h1 id="四、操作建议与最佳实践"><a href="#四、操作建议与最佳实践" class="headerlink" title="四、操作建议与最佳实践"></a>四、操作建议与最佳实践</h1><ol><li><p>使用计算器：Percona 等公司提供了在线 InnoDB 配置计算器，可以根据您的硬件输入生成一个基础配置。</p></li><li><p>重点监控：</p></li></ol><ul><li>缓冲池命中率：应接近 100%。公式：(1 - Innodb_buffer_pool_reads &#x2F; Innodb_buffer_pool_read_requests) * 100%。如果过低，说明 innodb_buffer_pool_size 可能太小。</li><li>线程缓存命中率：(1 - Threads_created &#x2F; Connections) * 100%。如果过低，增加 thread_cache_size。</li><li>慢查询日志：定期分析慢查询日志，优化 SQL 语句和索引比调整配置效果更显著。</li></ul><ol start="3"><li><p>使用 MySQLTuner：这是一个非常流行的 Perl 脚本，它通过分析您的 SHOW STATUS 和 SHOW VARIABLES 结果，给出具体的优化建议。强烈推荐在运行一段时间后使用。</p></li><li><p>测试：任何配置更改都应在非生产环境进行充分测试和压力测试（如使用 sysbench）。</p></li><li><p>版本考量：MySQL 5.7 和 8.0 在默认配置和性能上已有很大改进。如果使用旧版本，升级本身可能就是最好的优化。</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>MySQL 优化是一个持续的过程：</p><p>SQL&#x2F;索引优化 &gt; 配置优化 &gt; 硬件优化</p><p>首先确保您的数据库 Schema 设计和 SQL 查询是高效的，然后再通过调整系统配置来最大化硬件潜力，最后才考虑升级硬件。始终基于监控数据来做决策，而不是猜测。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx负载均衡服务器优化</title>
      <link href="/blog/2025/09/14/Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%98%E5%8C%96/"/>
      <url>/blog/2025/09/14/Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="一、核心负载均衡策略优化"><a href="#一、核心负载均衡策略优化" class="headerlink" title="一、核心负载均衡策略优化"></a>一、核心负载均衡策略优化</h1><p>首先，确保你选择了最适合业务场景的负载均衡算法。</p><h2 id="1-算法选择："><a href="#1-算法选择：" class="headerlink" title="1. 算法选择："></a>1. 算法选择：</h2><ol><li><p>least_conn (最少连接)：优先分配给当前连接数最少的后端服务器。适用于请求处理时间长短不一的场景（如有些上传、下载耗时较长），比 round-robin 更公平。</p></li><li><p>ip_hash：根据客户端 IP 地址进行哈希计算，将同一 IP 的请求总是分配给同一个后端服务器。可用于解决 Session 一致性问题，但会导致负载不完全均衡，且后端服务器宕机会影响部分用户。</p></li><li><p>hash $<variable>（通用哈希）：可以自定义哈希的键，如 hash $request_uri 将相同 URL 的请求分配到同一后端，可利用后端缓存。</p></li><li><p>random (随机)：Nginx 1.15.1 及以上版本支持。可以指定 random two 并配合 least_conn，随机选择两台服务器，然后在这两台中选择连接数最少的，是一种很好的权衡策略。</p></li></ol><h4 id="配置示例："><a href="#配置示例：" class="headerlink" title="配置示例："></a>配置示例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    # 使用最少连接数算法</span><br><span class="line">    least_conn;</span><br><span class="line">    # 或者使用随机加权，选择两个然后挑连接数少的</span><br><span class="line">    # random two least_conn;</span><br><span class="line"></span><br><span class="line">    server backend1.example.com weight=3;</span><br><span class="line">    server backend2.example.com;</span><br><span class="line">    server backend3.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-权重（Weight）："><a href="#2-权重（Weight）：" class="headerlink" title="2. 权重（Weight）："></a>2. 权重（Weight）：</h2><p>根据服务器硬件性能的不同，使用 weight 参数分配不同的权重。性能好的服务器权重高，接收更多请求。</p><h2 id="3-慢启动（Slow-Start-商业版）："><a href="#3-慢启动（Slow-Start-商业版）：" class="headerlink" title="3. 慢启动（Slow Start - 商业版）："></a>3. 慢启动（Slow Start - 商业版）：</h2><p>Nginx Plus 商业版功能。当一台恢复健康的后端服务器重新加入集群时，其权重会从零逐步增加到设定值，避免刚启动就因为瞬间涌入大量请求而再次宕机。</p><h1 id="二、后端服务器健康检查与高可用"><a href="#二、后端服务器健康检查与高可用" class="headerlink" title="二、后端服务器健康检查与高可用"></a>二、后端服务器健康检查与高可用</h1><p>防止将请求转发到不可用的后端服务器是保证服务可用的关键。</p><h2 id="被动健康检查："><a href="#被动健康检查：" class="headerlink" title="被动健康检查："></a>被动健康检查：</h2><ul><li><p>默认开启。通过 max_fails 和 fail_timeout 参数定义。</p></li><li><p>max_fails：在 fail_timeout 时间内，连续失败达到此次数，则标记该服务器不可用。</p></li><li><p>fail_timeout：服务器被标记为不可用的时长，同时也是定义失败时间窗口的长度。</p></li></ul><h3 id="配置示例：-1"><a href="#配置示例：-1" class="headerlink" title="配置示例："></a>配置示例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server backend1.example.com max_fails=3 fail_timeout=30s;</span><br><span class="line">    server backend2.example.com max_fails=2 fail_timeout=20s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主动健康检查（Nginx-Plus）："><a href="#主动健康检查（Nginx-Plus）：" class="headerlink" title="主动健康检查（Nginx Plus）："></a>主动健康检查（Nginx Plus）：</h2><p>商业版功能。Nginx Plus 会定期向后端服务器发送特定的健康检查请求，根据响应判断其健康状况，无需等待真实请求失败。</p><p>可以自定义检查的URL、频率、预期响应码等。</p><h1 id="三、Nginx-自身性能优化"><a href="#三、Nginx-自身性能优化" class="headerlink" title="三、Nginx 自身性能优化"></a>三、Nginx 自身性能优化</h1><p>这些配置调整可以提升 Nginx 作为代理本身的处理能力和效率。</p><h2 id="调整工作进程："><a href="#调整工作进程：" class="headerlink" title="调整工作进程："></a>调整工作进程：</h2><ul><li><p>worker_processes auto;：设置为 auto 让其自动匹配 CPU 核心数，通常是很好的选择。</p></li><li><p>worker_cpu_affinity auto;（可选）：设置 CPU 亲和力，将 worker 进程绑定到特定 CPU 核心，减少上下文切换，提升缓存命中率。（在多核CPU上效果更明显）</p></li></ul><h2 id="调整连接数："><a href="#调整连接数：" class="headerlink" title="调整连接数："></a>调整连接数：</h2><ul><li><p>worker_connections：每个 worker 进程可以同时打开的最大连接数（包括前后端）。该值受限于系统的 ulimit -n（文件描述符限制）。</p></li><li><p>必须调整系统的最大文件描述符数（&#x2F;etc&#x2F;security&#x2F;limits.conf）以支持高并发。</p></li><li><p>multi_accept on;：让一个 worker 进程能够同时接受多个新连接。</p></li></ul><h2 id="高效事件模型："><a href="#高效事件模型：" class="headerlink" title="高效事件模型："></a>高效事件模型：</h2><p>在 Linux 2.6+ 系统上，使用 epoll 事件驱动模型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections 20480;</span><br><span class="line">    use epoll;</span><br><span class="line">    multi_accept on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓冲区和超时优化："><a href="#缓冲区和超时优化：" class="headerlink" title="缓冲区和超时优化："></a>缓冲区和超时优化：</h2><ul><li><p>调整代理缓冲区，避免 Nginx 在前后端之间充当“传声筒”时过度使用内存和I&#x2F;O。</p></li><li><p>proxy_buffering on;：启用缓冲，后端响应先传到缓冲区，再发给客户端，解放后端连接。</p></li><li><p>proxy_buffer_size 和 proxy_buffers：合理设置缓冲区大小和数量，避免过大浪费内存，过小导致频繁I&#x2F;O。</p></li><li><p>超时设置：避免连接长时间占用。</p></li><li><p>proxy_connect_timeout：与后端服务器建立连接的超时时间。</p></li><li><p>proxy_send_timeout：向后端发送请求的超时时间。</p></li><li><p>proxy_read_timeout：从后端读取响应的超时时间。</p></li><li><p>client_header_timeout 和 client_body_timeout：读取客户端请求头的超时时间。</p></li></ul><h3 id="示例配置片段："><a href="#示例配置片段：" class="headerlink" title="示例配置片段："></a>示例配置片段：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    proxy_buffering on;</span><br><span class="line">    proxy_buffer_size 4k;</span><br><span class="line">    proxy_buffers 8 4k;</span><br><span class="line">    proxy_connect_timeout 5s;</span><br><span class="line">    proxy_send_timeout 20s;</span><br><span class="line">    proxy_read_timeout 20s;</span><br><span class="line">    send_timeout 20s;</span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启用长连接（Keepalive）："><a href="#启用长连接（Keepalive）：" class="headerlink" title="启用长连接（Keepalive）："></a>启用长连接（Keepalive）：</h2><ul><li><p>与后端的连接：upstream 块中配置 keepalive 连接池，重用连接到后端服务器的 TCP 连接，极大减少建立和断开连接的开销。</p></li><li><p>与客户端的连接：keepalive_timeout 和 keepalive_requests 控制与客户端的连接复用。</p></li></ul><h3 id="配置示例：-2"><a href="#配置示例：-2" class="headerlink" title="配置示例："></a>配置示例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    server 10.0.0.1;</span><br><span class="line">    server 10.0.0.2;</span><br><span class="line">    # 保持到后端的空闲长连接数量，每个worker独享</span><br><span class="line">    keepalive 32;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://backend;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connection &quot;&quot;;</span><br><span class="line">        # ... 其他代理配置</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    # 与客户端的设置</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    keepalive_requests 1000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启用Gzip压缩："><a href="#启用Gzip压缩：" class="headerlink" title="启用Gzip压缩："></a>启用Gzip压缩：</h2><p>压缩响应数据，减少网络传输量，但会稍微增加 CPU 开销。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line">gzip_min_length 1024; # 小于此值的响应不压缩</span><br><span class="line">gzip_comp_level 6; # 压缩级别(1-9)，权衡压缩比和CPU消耗</span><br></pre></td></tr></table></figure><h2 id="日志优化："><a href="#日志优化：" class="headerlink" title="日志优化："></a>日志优化：</h2><ul><li><p>在高流量下，访问日志（access_log）会成为磁盘 I&#x2F;O 瓶颈。</p></li><li><p>策略一：缓冲写入：access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log main buffer&#x3D;64k flush&#x3D;1m;</p></li><li><p>策略二：采样记录：access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log main sample&#x3D;0.1; # 只记录10%的请求</p></li><li><p>策略三：关闭访问日志：对于纯负载均衡角色，如果无需分析，可直接关闭。</p></li><li><p>确保错误日志 (error_log) 级别不是 debug。</p></li></ul><h1 id="四、操作系统和网络优化"><a href="#四、操作系统和网络优化" class="headerlink" title="四、操作系统和网络优化"></a>四、操作系统和网络优化</h1><ul><li>网络堆栈优化：<br>调整 &#x2F;etc&#x2F;sysctl.conf 中的内核参数：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 增大最大打开文件数</span><br><span class="line">fs.file-max = 1000000</span><br><span class="line"></span><br><span class="line"># 提高网络连接能力</span><br><span class="line">net.core.somaxconn = 65535  # 增大监听队列长度</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 65535</span><br><span class="line">net.core.netdev_max_backlog = 65535</span><br><span class="line"></span><br><span class="line"># 减少TCP连接时间（加快TIME_WAIT回收）</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line"></span><br><span class="line"># 提高TCP缓冲区大小</span><br><span class="line">net.ipv4.tcp_rmem = 4096 87380 16777216</span><br><span class="line">net.ipv4.tcp_wmem = 4096 65536 16777216</span><br><span class="line">net.ipv4.tcp_mem = 8388608 12582912 16777216</span><br><span class="line"></span><br><span class="line"># 禁用不常用协议</span><br><span class="line">net.ipv4.tcp_sack = 0</span><br><span class="line">net.ipv4.tcp_dsack = 0</span><br></pre></td></tr></table></figure><blockquote><p>修改后执行 sysctl -p 生效。</p></blockquote><ul><li>防火墙：确保防火墙（如 iptables、firewalld）规则高效，避免成为瓶颈。</li></ul><h1 id="五、监控与维护"><a href="#五、监控与维护" class="headerlink" title="五、监控与维护"></a>五、监控与维护</h1><ul><li><p>启用状态页（Nginx Plus 或 Open Source Stub Status Module）：<br>开源版需要编译 –with-http_stub_status_module，然后配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /nginx_status &#123;</span><br><span class="line">    stub_status;</span><br><span class="line">    allow 192.168.1.0/24; # 限制可访问的IP</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>访问 <a href="http://your-nginx-server/nginx_status">http://your-nginx-server/nginx_status</a> 可看到简单的状态信息（活跃连接数、接受&#x2F;处理的请求数等）。</p></blockquote></li><li><p>Nginx Plus 实时监控：商业版提供丰富的实时监控仪表板和数据API。</p></li><li><p>日志分析：使用 ELK Stack（Elasticsearch, Logstash, Kibana）或 Grafana&#x2F;Loki 分析 Nginx 访问日志，监控 QPS、响应时间、错误率等关键指标。</p></li></ul><h1 id="总结与建议"><a href="#总结与建议" class="headerlink" title="总结与建议"></a>总结与建议</h1><ul><li><p>循序渐进：不要一次性修改所有参数。一次只修改一两项，然后进行压测（如使用 wrk, ab, jmeter），观察效果。</p></li><li><p>监控导向：所有优化都应以监控数据为依据。优化后，必须通过监控确认是否有效果（如延迟降低、吞吐量上升、错误率下降）。</p></li><li><p>基准测试：在调整任何参数前，先对当前配置进行基准测试，留下性能数据作为对比基准。</p></li><li><p>关注重点：通常最大的收益来自于：</p><p>   启用 keepalive（对后端和客户端）。</p><p>  选择合适的负载均衡算法。</p><p>  优化操作系统内核参数（特别是文件描述符和网络栈）。</p></li></ul><blockquote><p>通过以上这些层次的优化，你的 Nginx 负载均衡服务器将能更高效、稳定地处理大量并发请求。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 负载均衡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NGINX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离下解决文件下载权限问题</title>
      <link href="/blog/2025/09/12/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E4%B8%8B%E8%A7%A3%E5%86%B3%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/"/>
      <url>/blog/2025/09/12/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E4%B8%8B%E8%A7%A3%E5%86%B3%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>前后端分离框架中，前端在发起Ajax请求时，在Header携带Token值，后端获取该Token进行权限校验。</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在下载文件的场景，大部分浏览器是不支持Ajax请求文件下载，所以通常做法是直接请求下载地址，这时候是无法通过代码设置Header的参数，也就是无法知道当前用户信息，如何进行权限控制？</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>该问题的痛点是数据权限问题。</p><h1 id="初步思路"><a href="#初步思路" class="headerlink" title="初步思路"></a>初步思路</h1><ul><li>在用户要下载的时候，先进行权限校验</li><li>权限不足时，进行信息提示</li><li>权限足够时，则为用户生成一次性的下载链接（下载一次后失效，保证数据安全）</li></ul><h1 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h1><ul><li>流程设计</li><li>抽象功能</li><li>具体实现</li></ul><h1 id="流程设计"><a href="#流程设计" class="headerlink" title="流程设计"></a>流程设计</h1><p>业务模块前端：业务模块的前端代码，例如用户信息下载的前端代码。<br>业务服务后端：业务模块的后端代码（非介绍重点，所以不做细节区分）。<br>文件服务类：文件服务的业务类，主要是处理业务逻辑，例如：生成下载地址的唯一编号，以及唯一编号映射的参数信息，文件生成。<br>文件控制类：提供统一的下载地址格式，放开权限。<br><img src="https://gitee.com/saver-live/cdn/raw/master/images/0e1bd5b1-8fe2-69d7-d03b-b55d76f58964.png" alt="图片"></p><h1 id="代码设计"><a href="#代码设计" class="headerlink" title="代码设计"></a>代码设计</h1><p>基于框架考虑，以下功能抽象出来：</p><ul><li>持久化数据功能抽象（不同项目的具体情况不同）</li><li>生成文件功能抽象（因为不同业务生成文件的步骤是不一样的）</li></ul><h1 id="代码依赖关系"><a href="#代码依赖关系" class="headerlink" title="代码依赖关系"></a>代码依赖关系</h1><p><img src="https://gitee.com/saver-live/cdn/raw/master/images/34444219-0165-f01d-35a4-2b634bd701f5.png" alt="图片"></p><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><p>DownloadController - 文件下载控制器，不做权限控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">package com.accloud.core.file.download.controller;</span><br><span class="line"></span><br><span class="line">import com.accloud.core.file.download.FileResult;</span><br><span class="line">import com.accloud.core.file.download.service.DownloadService;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.BufferedOutputStream;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 文件下载控制器</span><br><span class="line"> *</span><br><span class="line"> * @author guoyu.huang</span><br><span class="line"> * @since 2020-10-16</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/download&quot;)</span><br><span class="line">public class DownloadController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DownloadService downloadService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/&#123;code&#125;&quot;)</span><br><span class="line">    public void download(@PathVariable(value = &quot;code&quot;) String code, HttpServletResponse response) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            FileResult fileResult = downloadService.getFile(code);</span><br><span class="line">            String filename = fileResult.getDownloadFilename();</span><br><span class="line">            response.setHeader(&quot;content-type&quot;, &quot;application/octet-stream&quot;);</span><br><span class="line">            response.setContentType(&quot;application/octet-stream;charset=UTF-8&quot;);</span><br><span class="line">            response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + URLEncoder.encode(filename, &quot;UTF-8&quot;));</span><br><span class="line">            response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">            FileInputStream fis = new FileInputStream(fileResult.getFile());</span><br><span class="line">            ByteArrayOutputStream bos = new ByteArrayOutputStream();</span><br><span class="line">            byte[] b = new byte[1024];</span><br><span class="line">            int n;</span><br><span class="line">            while ((n = fis.read(b)) != -1) &#123;</span><br><span class="line">                bos.write(b, 0, n);</span><br><span class="line">            &#125;</span><br><span class="line">            fis.close();</span><br><span class="line">            bos.close();</span><br><span class="line">            byte[] fileByte = bos.toByteArray();</span><br><span class="line">            OutputStream toClient = new BufferedOutputStream(response.getOutputStream());</span><br><span class="line">            toClient.write(fileByte);</span><br><span class="line">            toClient.flush();</span><br><span class="line">            toClient.close();</span><br><span class="line"></span><br><span class="line">            if (fileResult.isRemoveFileAfterDownload()) &#123;</span><br><span class="line">                fileResult.getFile().delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            response.reset();</span><br><span class="line">            response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">            response.setContentType(&quot;application/json;charset=utf-8&quot;);</span><br><span class="line">            response.getWriter().print(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DownloadService - 文件下载控制器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">package com.accloud.core.file.download.service;</span><br><span class="line"></span><br><span class="line">import com.accloud.core.file.download.FileResult;</span><br><span class="line">import com.accloud.core.file.download.code.DownloadCodeContent;</span><br><span class="line">import com.accloud.core.file.download.code.IDownloadCodeService;</span><br><span class="line">import com.accloud.core.file.handler.IFileHandler;</span><br><span class="line">import com.accloud.core.exception.BusinessException;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author guoyu.huang</span><br><span class="line"> * @since 2020-10-16</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class DownloadService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IDownloadCodeService downloadCodeService;</span><br><span class="line"></span><br><span class="line">    @Autowired(required = false)</span><br><span class="line">    private List&lt;IFileHandler&gt; fileHandlerList;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;downloadServer&#125;&quot;)</span><br><span class="line">    private String downloadServerPath;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取下载地址</span><br><span class="line">     *</span><br><span class="line">     * @param type</span><br><span class="line">     * @param parameter</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public String getDownloadUrl(String type, String parameter) &#123;</span><br><span class="line">        String code = downloadCodeService.buildCode(type, parameter);</span><br><span class="line">        return downloadServerPath + &quot;download/&quot; + code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取文件</span><br><span class="line">     *</span><br><span class="line">     * @param code</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public FileResult getFile(String code) &#123;</span><br><span class="line">        DownloadCodeContent content = downloadCodeService.getContent(code);</span><br><span class="line">        if (content == null) &#123;</span><br><span class="line">            throw new BusinessException(&quot;无此文件&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            downloadCodeService.delete(code);</span><br><span class="line">            if (fileHandlerList == null) &#123;</span><br><span class="line">                throw new BusinessException(&quot;功能异常，目前文件处理器列表为空&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                for (IFileHandler fileHandler : fileHandlerList) &#123;</span><br><span class="line">                    if (fileHandler.handle(content.getType())) &#123;</span><br><span class="line">                        return fileHandler.getFileResult(content.getParameter());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                throw new BusinessException(&quot;功能异常，无法处理类型为：%s 的文件&quot;, content.getType());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>FileResult - 文件结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 文件结果</span><br><span class="line"> *</span><br><span class="line"> * @author guoyu.huang</span><br><span class="line"> * @since 2020-10-16</span><br><span class="line"> */</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@RequiredArgsConstructor</span><br><span class="line">@Data</span><br><span class="line">public class FileResult &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 下载的文件名</span><br><span class="line">     */</span><br><span class="line">    @NonNull</span><br><span class="line">    private String downloadFilename;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 文件</span><br><span class="line">     */</span><br><span class="line">    @NonNull</span><br><span class="line">    private File file;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 下载后是否删除文件</span><br><span class="line">     */</span><br><span class="line">    private boolean removeFileAfterDownload;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>IFileHandler - 文件生成处理器接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 文件生成处理器接口</span><br><span class="line"> *</span><br><span class="line"> * @author guoyu.huang</span><br><span class="line"> * @since 2020-10-16</span><br><span class="line"> */</span><br><span class="line">public interface IFileHandler &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断能否处理</span><br><span class="line">     *</span><br><span class="line">     * @param type 传入类型，用于判断是否能够处理</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    boolean handle(String type);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取文件结果</span><br><span class="line">     *</span><br><span class="line">     * @param parameter</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    FileResult getFileResult(String parameter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>IDownloadCodeService - 下载编号接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 下载编号接口</span><br><span class="line"> *</span><br><span class="line"> * @author guoyu.huang</span><br><span class="line"> * @since 2020-10-26</span><br><span class="line"> */</span><br><span class="line">public interface IDownloadCodeService &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成编号</span><br><span class="line">     *</span><br><span class="line">     * @param type</span><br><span class="line">     * @param parameter</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    String buildCode(String type, String parameter);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据编号获取内容</span><br><span class="line">     *</span><br><span class="line">     * @param code</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    DownloadCodeContent getContent(String code);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除编号</span><br><span class="line">     *</span><br><span class="line">     * @param code</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    void delete(String code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前后端分离下载权限 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx负载均衡的5种策略</title>
      <link href="/blog/2025/09/12/Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%845%E7%A7%8D%E7%AD%96%E7%95%A5/"/>
      <url>/blog/2025/09/12/Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%845%E7%A7%8D%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>要理解负载均衡，必须先搞清楚正向代理和反向代理。</p><p>负载均衡的几种常用方式</p><h1 id="1、轮询（默认）"><a href="#1、轮询（默认）" class="headerlink" title="1、轮询（默认）"></a>1、轮询（默认）</h1><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p><p>upstream backserver {<br>    server 192.168.0.14;<br>    server 192.168.0.15;<br>}</p><h1 id="2、weight"><a href="#2、weight" class="headerlink" title="2、weight"></a>2、weight</h1><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的<br>情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream backserver &#123;</span><br><span class="line">    server 192.168.0.14 weight=3;</span><br><span class="line">    server 192.168.0.15 weight=7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>权重越高，在被访问的概率越大，如上例，分别是30%，70%。</p><h1 id="3、ip-hash"><a href="#3、ip-hash" class="headerlink" title="3、ip_hash"></a>3、ip_hash</h1><p>上述方式存在一个问题就是说，在负载均衡系统中，假如用户在某台服务器上登录了，那么该用户第二次请求的时候，因为我们是负载均衡系统，每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的。<br>我们可以采用ip_hash指令解决这个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。<br>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backserver &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.0.14:88;</span><br><span class="line">    server 192.168.0.15:80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、fair（第三方）"><a href="#4、fair（第三方）" class="headerlink" title="4、fair（第三方）"></a>4、fair（第三方）</h1><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backserver &#123;</span><br><span class="line">    server server1;</span><br><span class="line">    server server2;</span><br><span class="line">    fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5、url-hash（第三方）"><a href="#5、url-hash（第三方）" class="headerlink" title="5、url_hash（第三方）"></a>5、url_hash（第三方）</h1><p>按访问url的hash结果来分配请求，使每个url定向到同一个（对应的）后端服务器，后端服务器为缓存时比较有效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream backserver &#123;</span><br><span class="line">    server squid1:3128;</span><br><span class="line">    server squid2:3128;</span><br><span class="line">    hash $request_uri;</span><br><span class="line">    hash_method crc32;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要使用负载均衡的server中增加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">proxy_pass http://backserver/; </span><br><span class="line">upstream backserver&#123; </span><br><span class="line">    ip_hash; </span><br><span class="line">    server 127.0.0.1:9090 down; (down 表示单前的server暂时不参与负载) </span><br><span class="line">    server 127.0.0.1:8080 weight=2; (weight 默认为1.weight越大，负载的权重就越大) </span><br><span class="line">    server 127.0.0.1:6060; </span><br><span class="line">    server 127.0.0.1:7070 backup; (其它所有的非backup机器down或者忙的时候，请求backup机器) </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误</p><p>fail_timeout:max_fails次失败后，暂停的时间<br>配置实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line"></span><br><span class="line">worker_processes  4;</span><br><span class="line">events &#123;</span><br><span class="line"># 最大并发数</span><br><span class="line">worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http&#123;</span><br><span class="line">    # 待选服务器列表</span><br><span class="line">    upstream myproject&#123;</span><br><span class="line">        # ip_hash指令，将同一用户引入同一服务器。</span><br><span class="line">        ip_hash;</span><br><span class="line">        server 125.219.42.4 fail_timeout=60s;</span><br><span class="line">        server 172.31.2.183;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server&#123;</span><br><span class="line">        # 监听端口</span><br><span class="line">        listen 80;</span><br><span class="line">        # 根目录下</span><br><span class="line">        location / &#123;</span><br><span class="line">        # 选择哪个服务器列表</span><br><span class="line">            proxy_pass http://myproject;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 负载均衡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NGINX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#开发中常用的加密解密方法</title>
      <link href="/blog/2025/09/12/C-%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E6%96%B9%E6%B3%95/"/>
      <url>/blog/2025/09/12/C-%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>C#开发中常用的加密解密方法<br>相信很多人在开发过程中经常会遇到需要对一些重要的信息进行加密处理，今天给大家分享我个人总结的一些加密算法：<br>常见的加密方式分为可逆和不可逆两种方式<br>    可逆：RSA,AES,DES等<br>    不可逆：常见的MD5，SHAD等</p><h1 id="一、MD5消息摘要算法"><a href="#一、MD5消息摘要算法" class="headerlink" title="一、MD5消息摘要算法"></a>一、MD5消息摘要算法</h1><p>我想这是大家都常听过的算法，可能也用的比较多。那么什么是MD5算法呢？MD5全称是message-digest algorithm 5，简单的说就是单向的加密，也就是说无法根据密文推导出明文。<br>MD5主要用途：</p><ul><li>1、对一段信息生成信息摘要，该摘要对该信息具有唯一性,可以作为数字签名</li><li>2、用于验证文件的有效性(是否有丢失或损坏的数据)</li><li>3、对用户密码的加密</li><li>4、在哈希函数中计算散列值<br>从上边的主要用途中我们看到，由于算法的某些不可逆特征，在加密应用上有较好的安全性。通过使用MD5加密算法，我们输入一个任意长度的字节串，都会生成一个128位的整数。所以根据这一点MD5被广泛的用作密码加密。下面我就像大家演示一下怎样进行密码加密。<br>首先需要引入命名空间，先看一个比较简单的MD5加密的例子：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">using System.Security;</span><br><span class="line">using System.Security.Cryptography;</span><br><span class="line">public string ToMD5(string strs) </span><br><span class="line">&#123;</span><br><span class="line">            MD5 md5 = new MD5CryptoServiceProvider();</span><br><span class="line">            byte[] bytes = Encoding.Default.GetBytes(strs);//将要加密的字符串转换为字节数组</span><br><span class="line">            byte[] encryptdata = md5.ComputeHash(bytes);//将字符串加密后也转换为字符数组</span><br><span class="line">           return Convert.ToBase64String(encryptdata);//将加密后的字节数组转换为加密字符串</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>这里我们需要注意的是，不论是在加密的过程中，加密前要将加密字符串转为字节数组，加密后也要生成密文的字节数据，然后再转化为密文。<br>下面是关于MD5加密的其他形式，可以根据需求编写你们自己需要的加密算法：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"> 　　　　/// &lt;summary&gt;</span><br><span class="line">/// 创建哈希字符串适用于任何 MD5 哈希函数 （在任何平台） 上创建 32 个字符的十六进制格式哈希字符串</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;source&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static string Get32MD5One(string source)</span><br><span class="line">&#123;</span><br><span class="line">    using (System.Security.Cryptography.MD5 md5Hash = System.Security.Cryptography.MD5.Create())</span><br><span class="line">    &#123;</span><br><span class="line">        byte[] data = md5Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(source));</span><br><span class="line">        System.Text.StringBuilder sBuilder = new System.Text.StringBuilder();</span><br><span class="line">        for (int i = 0; i &lt; data.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sBuilder.Append(data[i].ToString(&quot;x2&quot;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        string hash = sBuilder.ToString();</span><br><span class="line">        return hash.ToUpper();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 获取16位md5加密</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;source&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static string Get16MD5One(string source)</span><br><span class="line">&#123;</span><br><span class="line">    using (System.Security.Cryptography.MD5 md5Hash = System.Security.Cryptography.MD5.Create())</span><br><span class="line">    &#123;</span><br><span class="line">        byte[] data = md5Hash.ComputeHash(System.Text.Encoding.UTF8.GetBytes(source));</span><br><span class="line">        //转换成字符串，并取9到25位</span><br><span class="line">        string sBuilder = BitConverter.ToString(data, 4, 8);</span><br><span class="line">        //BitConverter转换出来的字符串会在每个字符中间产生一个分隔符，需要去除掉</span><br><span class="line">        sBuilder = sBuilder.Replace(&quot;-&quot;, &quot;&quot;);</span><br><span class="line">        return sBuilder.ToString().ToUpper();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//// &lt;summary&gt;</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;strSource&quot;&gt;需要加密的明文&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;返回32位加密结果，该结果取32位加密结果的第9位到25位&lt;/returns&gt;</span><br><span class="line">public static string Get32MD5Two(string source)</span><br><span class="line">&#123;</span><br><span class="line">    System.Security.Cryptography.MD5 md5 = new System.Security.Cryptography.MD5CryptoServiceProvider();</span><br><span class="line">    //获取密文字节数组</span><br><span class="line">    byte[] bytResult = md5.ComputeHash(System.Text.Encoding.Default.GetBytes(source));</span><br><span class="line">    //转换成字符串，32位</span><br><span class="line">    string strResult = BitConverter.ToString(bytResult);</span><br><span class="line">    //BitConverter转换出来的字符串会在每个字符中间产生一个分隔符，需要去除掉</span><br><span class="line">    strResult = strResult.Replace(&quot;-&quot;, &quot;&quot;);</span><br><span class="line">    return strResult.ToUpper();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//// &lt;summary&gt;</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;strSource&quot;&gt;需要加密的明文&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;返回16位加密结果，该结果取32位加密结果的第9位到25位&lt;/returns&gt;</span><br><span class="line">public static string Get16MD5Two(string source)</span><br><span class="line">&#123;</span><br><span class="line">    System.Security.Cryptography.MD5 md5 = new System.Security.Cryptography.MD5CryptoServiceProvider();</span><br><span class="line">    //获取密文字节数组</span><br><span class="line">    byte[] bytResult = md5.ComputeHash(System.Text.Encoding.Default.GetBytes(source));</span><br><span class="line">    //转换成字符串，并取9到25位</span><br><span class="line">    string strResult = BitConverter.ToString(bytResult, 4, 8);</span><br><span class="line">    //BitConverter转换出来的字符串会在每个字符中间产生一个分隔符，需要去除掉</span><br><span class="line">    strResult = strResult.Replace(&quot;-&quot;, &quot;&quot;);</span><br><span class="line">    return strResult.ToUpper();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="二、DES加密"><a href="#二、DES加密" class="headerlink" title="二、DES加密"></a>二、DES加密</h1><p>DES加密算法为密码体制中的对称密码体制，又被称为美国数据加密标准，是1972年美国IBM公司研制的对称密码体制加密算法。 明文按64位进行分组，密钥长64位，密钥事实上是56位参与DES运算（第8、16、24、32、40、48、56、64位是校验位， 使得每个密钥都有奇数个1）分组后的明文组和56位的密钥按位替代或交换的方法形成密文组的加密方法。<br>DES，全称Data Encryption Standard，是一种对称加密算法。由于其安全性比较高（有限时间内,没有一种加密方法可以说是100%安全）,很可能是最广泛的密钥系统（我们公司也在用，估计你们也有在用….），唯一一种方法可以破解该算法，那就是穷举法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// DES加密</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;data&quot;&gt;加密数据&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;key&quot;&gt;8位字符的密钥字符串&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;iv&quot;&gt;8位字符的初始化向量字符串&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static string DESEncrypt(string data, string key, string iv)</span><br><span class="line">&#123;</span><br><span class="line">    byte[] byKey = System.Text.ASCIIEncoding.ASCII.GetBytes(key);</span><br><span class="line">    byte[] byIV = System.Text.ASCIIEncoding.ASCII.GetBytes(iv);</span><br><span class="line"></span><br><span class="line">    DESCryptoServiceProvider cryptoProvider = new DESCryptoServiceProvider();</span><br><span class="line">    int i = cryptoProvider.KeySize;</span><br><span class="line">    MemoryStream ms = new MemoryStream();</span><br><span class="line">    CryptoStream cst = new CryptoStream(ms, cryptoProvider.CreateEncryptor(byKey, byIV), CryptoStreamMode.Write);</span><br><span class="line"></span><br><span class="line">    StreamWriter sw = new StreamWriter(cst);</span><br><span class="line">    sw.Write(data);</span><br><span class="line">    sw.Flush();</span><br><span class="line">    cst.FlushFinalBlock();</span><br><span class="line">    sw.Flush();</span><br><span class="line">    return Convert.ToBase64String(ms.GetBuffer(), 0, (int)ms.Length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// DES解密</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;data&quot;&gt;解密数据&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;key&quot;&gt;8位字符的密钥字符串(需要和加密时相同)&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;iv&quot;&gt;8位字符的初始化向量字符串(需要和加密时相同)&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static string DESDecrypt(string data, string key, string iv)</span><br><span class="line">&#123;</span><br><span class="line">    byte[] byKey = System.Text.ASCIIEncoding.ASCII.GetBytes(key);</span><br><span class="line">    byte[] byIV = System.Text.ASCIIEncoding.ASCII.GetBytes(iv);</span><br><span class="line"></span><br><span class="line">    byte[] byEnc;</span><br><span class="line">    try</span><br><span class="line">    &#123;</span><br><span class="line">        byEnc = Convert.FromBase64String(data);</span><br><span class="line">    &#125;</span><br><span class="line">    catch</span><br><span class="line">    &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DESCryptoServiceProvider cryptoProvider = new DESCryptoServiceProvider();</span><br><span class="line">    MemoryStream ms = new MemoryStream(byEnc);</span><br><span class="line">    CryptoStream cst = new CryptoStream(ms, cryptoProvider.CreateDecryptor(byKey, byIV), CryptoStreamMode.Read);</span><br><span class="line">    StreamReader sr = new StreamReader(cst);</span><br><span class="line">    return sr.ReadToEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外还有AES加密算法，但是AES加密是一个新的可以用于保护电子数据的加密算法。其产生的密码是迭代对称的分组密码，代加密使用一个循环结构，在该循环中重复置换和替换输入数据。</p><h1 id="三、RSA加密算法"><a href="#三、RSA加密算法" class="headerlink" title="三、RSA加密算法"></a>三、RSA加密算法</h1><p>在谈RSA加密算法之前，我们需要先了解下两个专业名词，对称加密和非对称加密。<br>对称加密即：含有一个称为密钥的东西，在消息发送前使用密钥对消息进行加密，在对方收到消息之后，使用相同的密钥进行解密<br>非对称加密即：加密和解密使用不同的密钥的一类加密算法。这类加密算法通常有两个密钥A和B，使用密钥A加密数据得到的密文，只有密钥B可以进行解密操作（即使密钥A也无法解密），相反，使用了密钥B加密数据得到的密文，只有密钥A可以解密。这两个密钥分别称为私钥和公钥，顾名思义，私钥就是你个人保留，不能公开的密钥，而公钥则是公开给加解密操作的另一方的。根据不同用途，对数据进行加密所使用的密钥也不相同（有时用公钥加密，私钥解密；有时相反用私钥加密，公钥解密）。非对称加密的代表算法是RSA算法。<br>了解了这两个名词下面来讲，RSA加密算法。RSA取名来自开发他们三者的名字。RSA是目前最有影响力的公钥加密算法，多用于数据加密和数字签名。虽然有这么大的影响力，但是同时它也有一些弊端，它产生密钥很麻烦，受到素数产生技术的限制，因而难以做到一次一密，分组长度太大等。<br>下面通过示例演示使用RSA加密、解密，引用名称空间System.Security.Cryptography;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">　　　　 /// &lt;summary&gt; </span><br><span class="line">/// RSA加密数据 </span><br><span class="line">/// &lt;/summary&gt; </span><br><span class="line">/// &lt;param name=&quot;express&quot;&gt;要加密数据&lt;/param&gt; </span><br><span class="line">/// &lt;param name=&quot;KeyContainerName&quot;&gt;密匙容器的名称&lt;/param&gt; </span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt; </span><br><span class="line">public static string RSAEncryption(string express, string KeyContainerName = null)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    System.Security.Cryptography.CspParameters param = new System.Security.Cryptography.CspParameters();</span><br><span class="line">    param.KeyContainerName = KeyContainerName ?? &quot;zhiqiang&quot;; //密匙容器的名称，保持加密解密一致才能解密成功</span><br><span class="line">    using (System.Security.Cryptography.RSACryptoServiceProvider rsa = new System.Security.Cryptography.RSACryptoServiceProvider(param))</span><br><span class="line">    &#123;</span><br><span class="line">        byte[] plaindata = System.Text.Encoding.Default.GetBytes(express);//将要加密的字符串转换为字节数组</span><br><span class="line">        byte[] encryptdata = rsa.Encrypt(plaindata, false);//将加密后的字节数据转换为新的加密字节数组</span><br><span class="line">        return Convert.ToBase64String(encryptdata);//将加密后的字节数组转换为字符串</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/// &lt;summary&gt; </span><br><span class="line">/// RSA解密数据 </span><br><span class="line">/// &lt;/summary&gt; </span><br><span class="line">/// &lt;param name=&quot;express&quot;&gt;要解密数据&lt;/param&gt; </span><br><span class="line">/// &lt;param name=&quot;KeyContainerName&quot;&gt;密匙容器的名称&lt;/param&gt; </span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt; </span><br><span class="line">public static string RSADecrypt(string ciphertext, string KeyContainerName = null)</span><br><span class="line">&#123;</span><br><span class="line">    System.Security.Cryptography.CspParameters param = new System.Security.Cryptography.CspParameters();</span><br><span class="line">    param.KeyContainerName = KeyContainerName ?? &quot;zhiqiang&quot;; //密匙容器的名称，保持加密解密一致才能解密成功</span><br><span class="line">    using (System.Security.Cryptography.RSACryptoServiceProvider rsa = new System.Security.Cryptography.RSACryptoServiceProvider(param))</span><br><span class="line">    &#123;</span><br><span class="line">        byte[] encryptdata = Convert.FromBase64String(ciphertext);</span><br><span class="line">        byte[] decryptdata = rsa.Decrypt(encryptdata, false);</span><br><span class="line">        return System.Text.Encoding.Default.GetString(decryptdata);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、Base64编码"><a href="#四、Base64编码" class="headerlink" title="四、Base64编码"></a>四、Base64编码</h1><p>这个就不做过多解释了，直接上代码。</p><h2 id="region-Base64加密解密"><a href="#region-Base64加密解密" class="headerlink" title="region Base64加密解密"></a>region Base64加密解密</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// Base64加密</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;input&quot;&gt;需要加密的字符串&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static string Base64Encrypt(string input)</span><br><span class="line">&#123;</span><br><span class="line">    return Base64Encrypt(input, new UTF8Encoding());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// Base64加密</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;input&quot;&gt;需要加密的字符串&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;encode&quot;&gt;字符编码&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static string Base64Encrypt(string input, Encoding encode)</span><br><span class="line">&#123;</span><br><span class="line">    return Convert.ToBase64String(encode.GetBytes(input));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// Base64解密</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;input&quot;&gt;需要解密的字符串&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static string Base64Decrypt(string input)</span><br><span class="line">&#123;</span><br><span class="line">    return Base64Decrypt(input, new UTF8Encoding());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// Base64解密</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;input&quot;&gt;需要解密的字符串&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;encode&quot;&gt;字符的编码&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static string Base64Decrypt(string input, Encoding encode)</span><br><span class="line">&#123;</span><br><span class="line">    return encode.GetString(Convert.FromBase64String(input));</span><br><span class="line">&#125;</span><br><span class="line">#endregion</span><br></pre></td></tr></table></figure><h1 id="五、SHA安全散列算法"><a href="#五、SHA安全散列算法" class="headerlink" title="五、SHA安全散列算法"></a>五、SHA安全散列算法</h1><p> SHA，全称SecureHashAlgorithm，是一种数据加密算法，该算法的思想是接收一段明文，然后以一种不可逆的方式将它转换成一段（通常更小）密文，也可以简单的理解为取一串输入码（称为预映射或信息），并把它们转化为长度较短、位数固定的输出序列即散列值（也称为信息摘要或信息认证代码）的过程。<br>下面贴SHA各种加密算法代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  　　//SHA为不可逆加密方式</span><br><span class="line">public static string SHA1Encrypt(string Txt)</span><br><span class="line">&#123;</span><br><span class="line">    var bytes = System.Text.Encoding.Default.GetBytes(Txt);</span><br><span class="line">    var SHA = new System.Security.Cryptography.SHA1CryptoServiceProvider();</span><br><span class="line">    var encryptbytes = SHA.ComputeHash(bytes);</span><br><span class="line">    return Convert.ToBase64String(encryptbytes);</span><br><span class="line">&#125;</span><br><span class="line">public static string SHA256Encrypt(string Txt)</span><br><span class="line">&#123;</span><br><span class="line">    var bytes = System.Text.Encoding.Default.GetBytes(Txt);</span><br><span class="line">    var SHA256 = new System.Security.Cryptography.SHA256CryptoServiceProvider();</span><br><span class="line">    var encryptbytes = SHA256.ComputeHash(bytes);</span><br><span class="line">    return Convert.ToBase64String(encryptbytes);</span><br><span class="line">&#125;</span><br><span class="line">public static string SHA384Encrypt(string Txt)</span><br><span class="line">&#123;</span><br><span class="line">    var bytes = System.Text.Encoding.Default.GetBytes(Txt);</span><br><span class="line">    var SHA384 = new System.Security.Cryptography.SHA384CryptoServiceProvider();</span><br><span class="line">    var encryptbytes = SHA384.ComputeHash(bytes);</span><br><span class="line">    return Convert.ToBase64String(encryptbytes);</span><br><span class="line">&#125;</span><br><span class="line">public string SHA512Encrypt(string Txt)</span><br><span class="line">&#123;</span><br><span class="line">    var bytes = System.Text.Encoding.Default.GetBytes(Txt);</span><br><span class="line">    var SHA512 = new System.Security.Cryptography.SHA512CryptoServiceProvider();</span><br><span class="line">    var encryptbytes = SHA512.ComputeHash(bytes);</span><br><span class="line">    return Convert.ToBase64String(encryptbytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、AES加密算法"><a href="#六、AES加密算法" class="headerlink" title="六、AES加密算法"></a>六、AES加密算法</h1><p> AES算法基于排列和置换运算。排列是对数据重新进行安排，置换是将一个数据单元替换为另一个。<br>AES 使用几种不同的方法来执行排列和置换运算。    AES是一个迭代的、对称密钥分组的密码，它可以使用128、192 和 256 位密钥，并且用 128 位（16字节）分组加密和解密数据。与公共密钥密码使用密钥对不同，对称密钥密码使用相同的密钥加密和解密数据。通过分组密码返回的加密数据的位数与输入数据相同。迭代加密使用一个循环结构，在该循环中重复置换和替换输入数据。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">　　　　 /// &lt;summary&gt;</span><br><span class="line">///  AES 加密</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;str&quot;&gt;明文（待加密）&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;key&quot;&gt;密文&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public string AesEncrypt(string str, string key)</span><br><span class="line">&#123;</span><br><span class="line">    if (string.IsNullOrEmpty(str)) return null;</span><br><span class="line">    Byte[] toEncryptArray = Encoding.UTF8.GetBytes(str);</span><br><span class="line"> </span><br><span class="line">    RijndaelManaged rm = new RijndaelManaged</span><br><span class="line">    &#123;</span><br><span class="line">        Key = Encoding.UTF8.GetBytes(key),</span><br><span class="line">        Mode = CipherMode.ECB,</span><br><span class="line">        Padding = PaddingMode.PKCS7</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    ICryptoTransform cTransform = rm.CreateEncryptor();</span><br><span class="line">    Byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);</span><br><span class="line">    return Convert.ToBase64String(resultArray);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">///  AES 解密</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;str&quot;&gt;明文（待解密）&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;key&quot;&gt;密文&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public string AesDecrypt(string str, string key)</span><br><span class="line">&#123;</span><br><span class="line">    if (string.IsNullOrEmpty(str)) return null;</span><br><span class="line">    Byte[] toEncryptArray = Convert.FromBase64String(str);</span><br><span class="line"> </span><br><span class="line">    RijndaelManaged rm = new RijndaelManaged</span><br><span class="line">    &#123;</span><br><span class="line">        Key = Encoding.UTF8.GetBytes(key),</span><br><span class="line">        Mode = CipherMode.ECB,</span><br><span class="line">        Padding = PaddingMode.PKCS7</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    ICryptoTransform cTransform = rm.CreateDecryptor();</span><br><span class="line">    Byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);</span><br><span class="line"> </span><br><span class="line">    return Encoding.UTF8.GetString(resultArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据加密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis原子计数器incr，防止并发请求</title>
      <link href="/blog/2025/09/12/Redis%E5%8E%9F%E5%AD%90%E8%AE%A1%E6%95%B0%E5%99%A8incr%EF%BC%8C%E9%98%B2%E6%AD%A2%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82/"/>
      <url>/blog/2025/09/12/Redis%E5%8E%9F%E5%AD%90%E8%AE%A1%E6%95%B0%E5%99%A8incr%EF%BC%8C%E9%98%B2%E6%AD%A2%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>Redis原子计数器incr，防止并发请求</p><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在一些对高并发请求有限制的系统或者功能里，比如说秒杀活动，或者一些网站返回的当前用户过多，请稍后尝试。这些都是通过对同一时刻请求数量进行了限制，一般用作对后台系统的保护，防止系统因为过大的流量冲击而崩溃。对于系统崩溃带来的后果，显然还是拒绝一部分请求更能被维护者所接受。<br>而在各种限流中，除了系统自身设计的带锁机制的计数器外，利用Redis实现显然是一种既高效安全又便捷方便的方式。</p><h1 id="二、incr命令"><a href="#二、incr命令" class="headerlink" title="二、incr命令"></a>二、incr命令</h1><p>Redis Incr 命令将 key 中储存的数字值增一。<br>如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。<br>如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。<br>本操作的值限制在 64 位(bit)有符号数字表示之内。<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set num 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; get num    # 数字值在 Redis 中以字符串的形式保存</span><br><span class="line">&quot;11&quot;</span><br></pre></td></tr></table></figure><p>注意: 由于redis并没有一个明确的类型来表示整型数据，所以这个操作是一个字符串操作。<br>执行这个操作的时候，key对应存储的字符串被解析为10进制的64位有符号整型数据。<br>事实上，Redis 内部采用整数形式（Integer representation）来存储对应的整数值，所以对该类字符串值实际上是用整数保存，也就不存在存储整数的字符串表示（String representation）所带来的额外消耗。</p><h1 id="三、使用场景"><a href="#三、使用场景" class="headerlink" title="三、使用场景"></a>三、使用场景</h1><ul><li>1.计数器<br>使用思路是：每次有相关操作的时候，就向Redis服务器发送一个incr命令。<br>例如这样一个场景：我们有一个web应用，我们想记录每个用户每天访问这个网站的次数。<br>web应用只需要通过拼接用户id和代表当前时间的字符串作为key，每次用户访问这个页面的时候对这个key执行一下incr命令。<br>这个场景可以有很多种扩展方法:<br>通过结合使用INCR和EXPIRE命令，可以实现一个只记录用户在指定间隔时间内的访问次数的计数器<br>客户端可以通过GETSET命令获取当前计数器的值并且重置为0<br>通过类似于DECR或者INCRBY等原子递增&#x2F;递减的命令，可以根据用户的操作来增加或者减少某些值 比如在线游戏，需要对用户的游戏分数进行实时控制，分数可能增加也可能减少。</li><li>2.限速器<br>限速器是一种可以限制某些操作执行速率的特殊场景。<br>传统的例子就是限制某个公共api的请求数目。<br>假设我们要解决如下问题：限制某个api每秒每个ip的请求次数不超过10次。<br>我们可以通过incr命令来实现两种方法解决这个问题。<br>四、流量控制之java实现<br>这里我们将在java中使用redis-incr的特性来构建一个1分钟内只允许 请求100次的控制代码，key代表在redis内存放的被控制的键值。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public static boolean flowControl(String key)&#123;</span><br><span class="line">        //最大允许100</span><br><span class="line">        int max = 100;</span><br><span class="line">        long total = 1L;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (jedisInstance.get(key) == null) &#123;</span><br><span class="line">                //jedisInstance是Jedis连接实例，可以使单链接也可以使用链接池获取，实现方式请参考之前的blog内容</span><br><span class="line">                //如果redis目前没有这个key，创建并赋予0，有效时间为60s</span><br><span class="line">                jedisInstance.setex(key, 60, &quot;0&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //获取加1后的值</span><br><span class="line">                total = jedisInstance.incr(redisKey).longValue();</span><br><span class="line">                //Redis TTL命令以秒为单位返回key的剩余过期时间。当key不存在时，返回-2。当key存在但没有设置剩余生存时间时，返回-1。否则，以秒为单位，返回key的剩余生存时间。</span><br><span class="line">                if (jedisInstance.ttl(redisKey).longValue() == -1L)</span><br><span class="line">                &#123;</span><br><span class="line">                    //为给定key设置生存时间，当key过期时(生存时间为0)，它会被自动删除。</span><br><span class="line">                    jedisInstance.expire(redisKey, 60);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(&quot;流量控制组件:执行计数操作失败,无法执行计数&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        long keytotaltransations = max;</span><br><span class="line">        //判断是否已超过最大值，超过则返回false</span><br><span class="line">        if (total &gt; keytotaltransations) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis与关系型数据库的适合场景</title>
      <link href="/blog/2025/09/12/Redis%E4%B8%8E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%80%82%E5%90%88%E5%9C%BA%E6%99%AF/"/>
      <url>/blog/2025/09/12/Redis%E4%B8%8E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%80%82%E5%90%88%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="redis与关系型数据库的适合场景"><a href="#redis与关系型数据库的适合场景" class="headerlink" title="redis与关系型数据库的适合场景"></a>redis与关系型数据库的适合场景</h1><p>场景：书有标签，一本书可能有多个标签。一个标签可能对应多本书。<br>如果是关系型数据库来存储：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table book(</span><br><span class="line">id int,</span><br><span class="line">title char(20)</span><br><span class="line">)engine myisam charset utf8;</span><br><span class="line"></span><br><span class="line">insert into book values(5,&#x27;PHP经典&#x27;),(6,&#x27;Ruby实战&#x27;),(7,&#x27;MySQL基础&#x27;),(8,&#x27;Ruby服务端编程&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table tags(</span><br><span class="line">id int,</span><br><span class="line">book_id int,</span><br><span class="line">content char(20)</span><br><span class="line">)engine myisam charset utf8;</span><br><span class="line"></span><br><span class="line">insert into tags values(10,5,&#x27;php&#x27;),(11,5,&#x27;web&#x27;),(12,6,&#x27;web&#x27;),(13,6,&#x27;ruby&#x27;),(14,7,&#x27;database&#x27;),(15,8,&#x27;ruby&#x27;),(16,8,&#x27;server&#x27;);</span><br></pre></td></tr></table></figure><h1 id="Redis-key设计技巧"><a href="#Redis-key设计技巧" class="headerlink" title="Redis key设计技巧"></a>Redis key设计技巧</h1><ul><li>1、把表名转换为key前缀，如tag:</li><li>2、把第二段放置用于区分key的字段，对应msyql中主键的列名，如user_id</li><li>3、第三段放置主键值，如2,3,4</li><li>4、第四段写存储的列名</li></ul><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>在关系型数据中，除主键外，还有可能其他列也会参与查询。<br>如上表中，user_name也是很频繁查询的，往往这种列也是加了索引的。<br>转换到key-value数据中，则也要相应的生成一条按照该列为主的key-value<br>这样我们可以根据user_name:lily:user_id查询出user_id为9，再查user_id:9:email。<br>完成了根据用户名查询用户信息。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron 开发拆坑总结</title>
      <link href="/blog/2025/09/12/Electron-%E5%BC%80%E5%8F%91%E6%8B%86%E5%9D%91%E6%80%BB%E7%BB%93/"/>
      <url>/blog/2025/09/12/Electron-%E5%BC%80%E5%8F%91%E6%8B%86%E5%9D%91%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有一个web项目需要用客户端来包装一下 项目的主要业务都在服务器上 所以项目的大多数功能都用url 地址来访问； 客户端登陆界面在本地 打包客户端的本地登陆界面 做为登陆入口；</p><p>electron 开发中 有一个概念需要理解 我暂且叫主进程吗 main,  这个进程的控制 在项目的 配置 package.json  的main 字段中定义；</p><p>main.js 作为electron 控制的后端入口， 基本的主要控制都是在这个文件里面定义  eletron 控制系统 的接口很多也在这里面定义，详细可以查看官方API 文档； </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;linksame&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.4&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;邻盛管家客户端&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,  // 主进程控制定义</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;electron .&quot;,</span><br><span class="line">    &quot;dist&quot;: &quot;electron-builder -wm&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;electron-builder&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>使用到的nodejs 模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;electron-main-notification&quot;: &quot;^1.0.1&quot;,  // 右下角消息提醒 组件</span><br><span class="line"> &quot;electron-notify&quot;: &quot;^0.1.0&quot;,// 消息提醒组件</span><br><span class="line"> &quot;electron-packager&quot;: &quot;^10.1.2&quot;,// 项目打包 组件  打包为独立的绿色运行程序</span><br><span class="line"> &quot;electron-squirrel-startup&quot;: &quot;^1.0.0&quot;,// 升级包工具  用处不详</span><br><span class="line"> &quot;electron-updater&quot;: &quot;^2.20.1&quot;,// 一个不错的升级包 制作组件 我们用它做的升级包 提醒</span><br><span class="line"> &quot;gulp&quot;: &quot;^3.9.1&quot;, // 工具链工具  本地开发</span><br><span class="line"> &quot;nedb&quot;: &quot;^1.8.0&quot;,// 一个数据库组件  对象性质 nodejs  </span><br><span class="line"> &quot;request&quot;: &quot;^2.83.0&quot; // 一个请求库</span><br></pre></td></tr></table></figure><p>项目用到 eletron 主要的模块 说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const electron = require(&#x27;electron&#x27;) //</span><br><span class="line">//import &#123; autoUpdater &#125; from &quot;electron-updater&quot;</span><br><span class="line">const autoUpdater=require(&#x27;electron-updater&#x27;).autoUpdater // 升级包检测 不同于官方默认的那个</span><br><span class="line">autoUpdater.autoDownload = false // 配置取消自动下载</span><br><span class="line">// Module to control application life.</span><br><span class="line">const app = electron.app // 项目基础控制</span><br><span class="line">// Module to create native browser window.</span><br><span class="line">const BrowserWindow = electron.BrowserWindow  // 开窗口控制</span><br><span class="line">const BrowserView = electron.BrowserView  // 窗口控制另外一种方式 </span><br><span class="line">const dialog = electron.dialog // 系统弹出地址框</span><br><span class="line">const Tray = electron.Tray // 右下角任务栏</span><br><span class="line">const Menu = electron.Menu //右下角任务栏 菜单控制</span><br><span class="line">const Notification = electron.Notification // 消息提醒</span><br><span class="line">const window = electron.window </span><br><span class="line">const ipcMain = require(&#x27;electron&#x27;).ipcMain  // 重点 主进程通信专用  发通道信息  监听通道</span><br><span class="line">const ipcRenderer = require(&#x27;electron&#x27;).ipcRenderer // 重点 子窗口 通信专用 可以在子窗口中 和 主进程通信</span><br><span class="line">//const storage = require(&#x27;electron-json-storage&#x27;)</span><br><span class="line">const &#123;shell&#125; = require(&#x27;electron&#x27;) // electron 基础功能接口  例如  打开浏览器网页  ； 打开文件  运行程序等等；</span><br><span class="line">const notify = require(&#x27;electron-main-notification&#x27;) // 也是一个消息对话框</span><br><span class="line">const &#123;session&#125; = require(&#x27;electron&#x27;)  // seesion  cookie 控制</span><br><span class="line">const fs = require(&#x27;fs&#x27;);  // nodejs 模块 文件文本操作等等 io</span><br><span class="line">const nedb = require(&#x27;nedb&#x27;); // 数据库 一个nodejs 中可以用的数据库</span><br></pre></td></tr></table></figure><h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><p>const ipcMain &#x3D; require(‘electron’).ipcMain &#x2F;&#x2F; 重点 主进程通信专用 发通道信息 监听通道<br>const ipcRenderer &#x3D; require(‘electron’).ipcRenderer &#x2F;&#x2F; 重点 子窗口 通信专用 可以在子窗口中 和 主进程通信<br>&#x2F;&#x2F; 例如 主穿裤中监听 界面发来的命令 主进程中执行相应操作<br>ipcMain.on(‘window-min’,function(){<br>mainWindow.minimize();<br>})<br>&#x2F;&#x2F; 主进程发起送消息 其他页面会收到数据domianObj<br>mainWindow.webContents.send(‘islogin’,domainObj)</p><h2 id="本地数据库"><a href="#本地数据库" class="headerlink" title="本地数据库"></a>本地数据库</h2><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h2 id="升级包制作"><a href="#升级包制作" class="headerlink" title="升级包制作"></a>升级包制作</h2><p>参考 ：<a href="https://www.electron.build/auto-update">https://www.electron.build/auto-update</a><br>const autoUpdater&#x3D;require(‘electron-updater’).autoUpdater &#x2F;&#x2F; 升级包检查模块 包含检查升级包 下载 安装等接口封装 都在里面<br>autoUpdater.setFeedURL(‘<a href="http://www.linksame.com/release/">http://www.linksame.com/release/</a>‘);<br>升级包检测 比较<br>app.getVersion() &#x2F;&#x2F; 系统当前版本<br>&#x2F;&#x2F; 检查升级包接口 返回 Promise 对象<br>let checkinfo&#x3D;autoUpdater.checkForUpdates();<br>&#x2F;&#x2F;console.log(‘checkinfo:’,checkinfo)<br>checkinfo.then(function(data){<br>console.log(‘datav:::’,data.versionInfo.version)<br>console.log(‘datav2:::’,data)<br>&#x2F;&#x2F; 返回的data 为网络上版本最新版信息 可获取系统版本号 和 最新版本好比较 确定要部要升级<br>if(data.versionInfo.version!&#x3D;app.getVersion()){<br>updateHandle();<br>&#x2F;&#x2F;const UpdateInfo&#x3D;require(‘electron-updater’).UpdateInfo<br>&#x2F;&#x2F;console.log(‘UpdateInfo:’,)<br>}<br>})</p><h2 id="Promise-应用-对象"><a href="#Promise-应用-对象" class="headerlink" title="Promise 应用 对象"></a>Promise 应用 对象</h2><p>异步变成 新规范 一些功能中用到了 例如 autoUpdater 升级管理 模块的的一些接口 就是 该类型</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>升级参考<br><a href="https://segmentfault.com/a/1190000010271226">https://segmentfault.com/a/1190000010271226</a><br><a href="https://www.cnblogs.com/qirui/p/8328069.html">https://www.cnblogs.com/qirui/p/8328069.html</a></p><h2 id="main-js-参考"><a href="#main-js-参考" class="headerlink" title="main.js 参考"></a>main.js 参考</h2><p>项目组控制 介绍说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br></pre></td><td class="code"><pre><span class="line">if (require(&#x27;electron-squirrel-startup&#x27;)) return;</span><br><span class="line">const electron = require(&#x27;electron&#x27;)</span><br><span class="line">//import &#123; autoUpdater &#125; from &quot;electron-updater&quot;</span><br><span class="line">const autoUpdater=require(&#x27;electron-updater&#x27;).autoUpdater</span><br><span class="line">autoUpdater.autoDownload = false // 配置取消自动下载</span><br><span class="line">// Module to control application life.</span><br><span class="line">const app = electron.app</span><br><span class="line">// Module to create native browser window.</span><br><span class="line">const BrowserWindow = electron.BrowserWindow</span><br><span class="line">const BrowserView = electron.BrowserView</span><br><span class="line">const dialog = electron.dialog</span><br><span class="line">const Tray = electron.Tray</span><br><span class="line">const Menu = electron.Menu</span><br><span class="line">const Notification = electron.Notification</span><br><span class="line">const window = electron.window</span><br><span class="line">const ipcMain = require(&#x27;electron&#x27;).ipcMain</span><br><span class="line">const ipcRenderer = require(&#x27;electron&#x27;).ipcRenderer</span><br><span class="line">//const storage = require(&#x27;electron-json-storage&#x27;)</span><br><span class="line">const &#123;shell&#125; = require(&#x27;electron&#x27;)</span><br><span class="line">const notify = require(&#x27;electron-main-notification&#x27;)</span><br><span class="line">const &#123;session&#125; = require(&#x27;electron&#x27;)</span><br><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const nedb = require(&#x27;nedb&#x27;); // 数据库</span><br><span class="line">  </span><br><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">const url = require(&#x27;url&#x27;)</span><br><span class="line"></span><br><span class="line">const icologo=__dirname+&#x27;\\ioc\\ls.ico&#x27;</span><br><span class="line">// 域名</span><br><span class="line">const domain=&quot;http://www.linksame.com&quot;;</span><br><span class="line">const loginpath=domain+&quot;/index.php?app=Core&amp;m=Pcdlogin&amp;network=1&amp;ip=0&quot;</span><br><span class="line">const request = require(&#x27;request&#x27;)</span><br><span class="line">// 判断网络配置</span><br><span class="line">const  options = &#123;</span><br><span class="line">　　　　　　　method: &#x27;post&#x27;,</span><br><span class="line">                      url:domain+&#x27;/release/network.json&#x27;,</span><br><span class="line">                      form: &quot;content&quot;,</span><br><span class="line">                      headers: &#123;</span><br><span class="line">                        &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">const message=&#123;</span><br><span class="line">      error:&#x27;check version error&#x27;,</span><br><span class="line">      checking:&#x27;check updateing ......&#x27;,</span><br><span class="line">      updateAva:&#x27;find a New Version，downloading ......&#x27;,</span><br><span class="line">      updateNotAva:&#x27;now it New best&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">const os = require(&#x27;os&#x27;);</span><br><span class="line"></span><br><span class="line">// init obj</span><br><span class="line">let mainWindow</span><br><span class="line">let tray = null</span><br><span class="line">const app_data=app.getPath(&#x27;userData&#x27;)</span><br><span class="line">console.log(&#x27;app_data&#x27;,app_data)</span><br><span class="line"></span><br><span class="line">// 设置共享运行目录</span><br><span class="line">global.linksame = &#123;</span><br><span class="line">  runpath: app_data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 实例化连接对象（不带参数默认为内存数据库） </span><br><span class="line"></span><br><span class="line">const db = new nedb(&#123;</span><br><span class="line">  filename: path.join(app_data,&#x27;\\Cache\\downloadfile.db&#x27;),</span><br><span class="line">  autoload: true</span><br><span class="line">&#125;);</span><br><span class="line">let date=new Date();</span><br><span class="line"></span><br><span class="line">const initobj=&#123;</span><br><span class="line">  width:1024,</span><br><span class="line">  height:760,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function createWindow() &#123;</span><br><span class="line">    // Create the browser window.</span><br><span class="line">    mainWindow = new BrowserWindow(&#123; </span><br><span class="line">      width: 712, </span><br><span class="line">      height: 588, </span><br><span class="line">      icon:icologo,</span><br><span class="line">      title:&#x27;邻盛企业管家&#x27;,</span><br><span class="line">      frame: false,</span><br><span class="line">      transparent: true,</span><br><span class="line">      webPreferences:&#123;</span><br><span class="line">        nodeIntegration:true,</span><br><span class="line">        nodeIntegrationInWorker:true,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">//Menu.setApplicationMenu(null);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"> const mainindex = path.join(&#x27;file://&#x27;, __dirname, &#x27;index.html&#x27;)</span><br><span class="line"> mainWindow.loadURL(mainindex)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    mainWindow.once(&#x27;ready-to-show&#x27;, () =&gt; &#123;</span><br><span class="line">        mainWindow.show()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // Open the DevTools.</span><br><span class="line">    // mainWindow.webContents.openDevTools()</span><br><span class="line"></span><br><span class="line">    // Emitted when the window is closed.</span><br><span class="line">    mainWindow.on(&#x27;closed&#x27;, function() &#123;</span><br><span class="line">       </span><br><span class="line">        mainWindow = null</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //捕获新打开窗口事件 定制新窗口</span><br><span class="line">    mainWindow.webContents.on(&#x27;new-window&#x27;, (event, url) =&gt; &#123;</span><br><span class="line">      event.preventDefault()</span><br><span class="line">      const win = new BrowserWindow(&#123; </span><br><span class="line">        width: 1024, </span><br><span class="line">        height: 760,</span><br><span class="line">        icon:__dirname+&#x27;./ioc/ls.ico&#x27;,</span><br><span class="line">        title:&#x27;邻盛企业管家&#x27;,</span><br><span class="line">        frame: false,</span><br><span class="line">        transparent: true,</span><br><span class="line">        backgroundColor:&#x27;#4385F4&#x27;,</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line">      win.once(&#x27;ready-to-show&#x27;, () =&gt; win.show())</span><br><span class="line">      win.loadURL(url)</span><br><span class="line">      //event.newGuest = win</span><br><span class="line"></span><br><span class="line">      console.log(&#x27;windowID:&#x27;,win.id)</span><br><span class="line"></span><br><span class="line">      ipcMain.on(&#x27;sub-close&#x27;,function(d)&#123;</span><br><span class="line">        console.log(&#x27;d&#x27;,d)</span><br><span class="line">        win.hide()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // download </span><br><span class="line"></span><br><span class="line">    mainWindow.webContents.session.on(&#x27;will-download&#x27;, (event, item, webContents) =&gt; &#123;</span><br><span class="line">        // Set the save path, making Electron not to prompt a save dialog.</span><br><span class="line"></span><br><span class="line">        item.on(&#x27;updated&#x27;, (event, state) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">            if (state === &#x27;interrupted&#x27;) &#123;</span><br><span class="line">                console.log(&#x27;Download is interrupted but can be resumed&#x27;)</span><br><span class="line">            &#125; else if (state === &#x27;progressing&#x27;) &#123;</span><br><span class="line">                // set loading progressBar</span><br><span class="line">                 mainWindow.setProgressBar(item.getReceivedBytes() / item.getTotalBytes());</span><br><span class="line"></span><br><span class="line">                if (item.isPaused()) &#123;</span><br><span class="line">                    console.log(&#x27;Download is paused&#x27;)</span><br><span class="line">                &#125; else &#123;</span><br><span class="line"></span><br><span class="line">                  if(Math.ceil(item.getReceivedBytes()/1024/1024)===1)&#123;</span><br><span class="line">                      let title=&#x27;稍等 正在下载&#x27;;</span><br><span class="line">                      let body= item.getSavePath();</span><br><span class="line">                      let ico=getico(item.getSavePath());</span><br><span class="line">                      notifly(title,body,ico)</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                    let download = `Received bytes: $&#123;Math.ceil(item.getReceivedBytes()/1024/1024)&#125; M / $&#123;Math.ceil(item.getTotalBytes()/1024/1024)&#125;M`</span><br><span class="line"></span><br><span class="line">                    console.log(`Received bytes: $&#123;Math.ceil(item.getReceivedBytes()/1024/1024)&#125; M / $&#123;Math.ceil(item.getTotalBytes()/1024/1024)&#125;M`)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        item.once(&#x27;done&#x27;, (event, state) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">            if (state === &#x27;completed&#x27;) &#123;</span><br><span class="line">                const filepath=item.getSavePath();</span><br><span class="line">                var arr = filepath.split(&#x27;\\&#x27;);</span><br><span class="line">                let filename=arr[arr.length-1];</span><br><span class="line"></span><br><span class="line">                let title=filename+&#x27; 下载完成！&#x27;;</span><br><span class="line">                let body= item.getSavePath()+&#x27;    打开&#x27;;</span><br><span class="line">                let ico=getico(item.getSavePath());</span><br><span class="line"></span><br><span class="line">                //notifly(title,body,ico)</span><br><span class="line">                notiflyclick(title,body,function()&#123; shell.openItem(filepath) &#125;)</span><br><span class="line">                console.log(&#x27;Download successfully&#x27;)</span><br><span class="line">            </span><br><span class="line">                db.insert(&#123;</span><br><span class="line">                    name: filename,</span><br><span class="line">                    path:item.getSavePath(),</span><br><span class="line">                    datetime:date.toLocaleDateString(),</span><br><span class="line">                    sizes:Math.ceil(item.getTotalBytes()/1024/1024),</span><br><span class="line">                  &#125;, (err, ret) =&gt; &#123;</span><br><span class="line">                     console.log(&#x27;insert successfully&#x27;,err,ret)</span><br><span class="line">                  &#125;);</span><br><span class="line">               </span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                console.log(`Download failed: $&#123;state&#125;`)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //  任务栏图标菜单 A </span><br><span class="line">    tray = new Tray(icologo)</span><br><span class="line">    const contextMenu = Menu.buildFromTemplate([&#123;</span><br><span class="line">            label: &#x27;帮助中心&#x27;,</span><br><span class="line">            type: &#x27;normal&#x27;,</span><br><span class="line">            icon:  __dirname+&#x27;\\ioc\\help.png&#x27;,</span><br><span class="line">            click: function() &#123;</span><br><span class="line">                  shell.openExternal(&#x27;http://help.linksame.com/&#x27;)</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; label: &#x27;官网&#x27;, type: &#x27;normal&#x27;, icon: __dirname+&#x27;\\ioc\\web.png&#x27;,click:function()&#123;</span><br><span class="line">            shell.openExternal(&#x27;http://www.linksame.com&#x27;)</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">        &#123; label: &#x27;移动端&#x27;, type: &#x27;normal&#x27;, icon:__dirname+&#x27;\\ioc\\phone.png&#x27;,click:function()&#123;</span><br><span class="line">            //shell.openExternal(&#x27;http://www.linksame.com/index.php?app=Core&amp;m=V7&amp;a=download&#x27;)</span><br><span class="line">            </span><br><span class="line">            const modalPath = path.join(&#x27;file://&#x27;, __dirname, &#x27;qcode.html&#x27;)</span><br><span class="line">            //let win = new BrowserWindow(&#123; width: 705, height: 250,resizable:false,autoHideMenuBar:true,type: &#x27;desktop&#x27;, icon: &#x27;./ioc/download2.png&#x27; &#125;)</span><br><span class="line">            let win = new BrowserWindow(&#123; </span><br><span class="line">              title:&#x27;移动设备软件下载&#x27;, </span><br><span class="line">              width: 250, </span><br><span class="line">              height: 250,</span><br><span class="line">              autoHideMenuBar:true,</span><br><span class="line">              type: &#x27;desktop&#x27;, </span><br><span class="line">              icon:__dirname+&#x27;\\ioc\\phone.png&#x27;,</span><br><span class="line">              resizable:false,</span><br><span class="line">              maximizable:false,</span><br><span class="line"></span><br><span class="line">               &#125;)</span><br><span class="line">            //win.setApplicationMenu(null);</span><br><span class="line">            win.on(&#x27;close&#x27;, function() &#123; win = null &#125;)</span><br><span class="line">            win.loadURL(modalPath)</span><br><span class="line">            win.show()</span><br><span class="line"></span><br><span class="line">        &#125; &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            label: &#x27;下载管理&#x27;,</span><br><span class="line">            type: &#x27;normal&#x27;,</span><br><span class="line">            icon:__dirname+&#x27;\\ioc\\down.png&#x27;,</span><br><span class="line">            click: function() &#123;</span><br><span class="line">                const modalPath = path.join(&#x27;file://&#x27;, __dirname, &#x27;download.html&#x27;)</span><br><span class="line">                //let win = new BrowserWindow(&#123; width: 705, height: 250,resizable:false,autoHideMenuBar:true,type: &#x27;desktop&#x27;, icon: &#x27;./ioc/download2.png&#x27; &#125;)</span><br><span class="line">                let win = new BrowserWindow(&#123; </span><br><span class="line">                  width: 705, </span><br><span class="line">                  height: 250,</span><br><span class="line">                  autoHideMenuBar:true,</span><br><span class="line">                  type: &#x27;desktop&#x27;, </span><br><span class="line">                  icon: __dirname+&#x27;\\ioc\\download2.png&#x27;,</span><br><span class="line">                  resizable:false,</span><br><span class="line">                  maximizable:false,</span><br><span class="line">                   &#125;)</span><br><span class="line">                //win.setApplicationMenu(null);</span><br><span class="line">                win.on(&#x27;close&#x27;, function() &#123; win = null &#125;)</span><br><span class="line">                win.loadURL(modalPath)</span><br><span class="line">                win.show()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            label: &#x27;设置&#x27;,</span><br><span class="line">            type: &#x27;submenu&#x27;,</span><br><span class="line">            icon:__dirname+&#x27;\\ioc\\setting.png&#x27;,</span><br><span class="line">            submenu: [</span><br><span class="line">                &#123; label: &#x27;开机启动&#x27;, type: &#x27;normal&#x27;, icon:__dirname+&#x27;\\ioc\\sysset.png&#x27; &#125;,</span><br><span class="line">                &#123; label: &#x27;更新缓存&#x27;, type: &#x27;normal&#x27;, icon:__dirname+&#x27;\\ioc\\clear-2.png&#x27;,click:function()&#123;</span><br><span class="line">                           let cachepath=app_data+&#x27;/Cache&#x27;</span><br><span class="line">                           let dir=fs.readdir(cachepath,(err,file)=&gt;&#123;</span><br><span class="line">                                                          </span><br><span class="line">                              for(v in file)&#123;</span><br><span class="line">                                  console.log(&#x27;file&#x27;,v)</span><br><span class="line">                                  let rmnum=shell.moveItemToTrash(path.join(cachepath,file[v]))</span><br><span class="line">                                  console.log(&#x27;remove&#x27;,rmnum)</span><br><span class="line">                              &#125;</span><br><span class="line">                              notifly(&#x27;缓存清理&#x27;,&#x27;缓存清理完成！&#x27;,__dirname+&#x27;\\ioc\\ok.png&#x27;)</span><br><span class="line"></span><br><span class="line">                           &#125;)</span><br><span class="line">                &#125;&#125;,</span><br><span class="line">              </span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; label: &#x27;升级&#x27;, type: &#x27;normal&#x27;, icon: __dirname+&#x27;\\ioc\\upgrate.png&#x27;,click:function()&#123;</span><br><span class="line">          updateHandle();</span><br><span class="line">        &#125; &#125;,</span><br><span class="line">        &#123; label: &#x27;注销&#x27;, type: &#x27;normal&#x27;, icon: __dirname+&#x27;\\ioc\\zx.png&#x27;, role: &#x27;close&#x27;,click:function()&#123;</span><br><span class="line">            </span><br><span class="line">            // console.log(&#x27;siht&#x27;,console.log(ses.getUserAgent()))</span><br><span class="line">            // 查询与指定 url 相关的所有 cookies.</span><br><span class="line">            </span><br><span class="line">            /*session.defaultSession.cookies.remove(&#x27;http://www.linksame.com&#x27;,&#x27;sns_shell&#x27;,function(cookies) &#123;</span><br><span class="line">                          console.log(&#x27;remove~~~~&#x27;)</span><br><span class="line">                        &#125;);*/</span><br><span class="line">            session.defaultSession.cookies.get(&#123;url:domain&#125;, function(error, cookies) &#123;</span><br><span class="line"></span><br><span class="line">                       let  domainObj=cookies</span><br><span class="line">                       for (var i in domainObj)&#123;</span><br><span class="line">                         console.log(i,&#x27;:&#x27;,domainObj[i])</span><br><span class="line">                         session.defaultSession.cookies.remove(domain,domainObj[i].name, function(data) &#123;</span><br><span class="line">                                       console.log(&#x27;remove&#x27;,data);</span><br><span class="line">                          &#125;);</span><br><span class="line">                         </span><br><span class="line">                       &#125;</span><br><span class="line">                       //console.log(&#x27;ddd&#x27;,domainObj)</span><br><span class="line">             &#125;);</span><br><span class="line"></span><br><span class="line">             let newobj=session.defaultSession.cookies.get(&#123; url : domain &#125;, function(error, cookies) &#123;</span><br><span class="line">                console.log(&#x27;login out coockie:&#x27;,newobj)</span><br><span class="line">              &#125;);</span><br><span class="line">           </span><br><span class="line">              app.quit();  </span><br><span class="line">              //session.cookies.remove(&quot;http://www.linksame.com&quot;, name, callback)</span><br><span class="line">                          </span><br><span class="line">        &#125;&#125;,</span><br><span class="line">        &#123; label: &#x27;退出&#x27;, type: &#x27;normal&#x27;, icon:__dirname+&#x27;\\ioc\\loginout.png&#x27;, role: &#x27;close&#x27;,click:function()&#123;</span><br><span class="line">              const dopt=&#123;</span><br><span class="line">                type:&#x27;question&#x27;,</span><br><span class="line">                title:&#x27;你确定要退出吗？&#x27;,</span><br><span class="line">                buttons:[&#x27;确定&#x27;,&#x27;取消&#x27;],</span><br><span class="line">                defaultId:1,</span><br><span class="line">                message:&#x27;退出后 会关闭邻盛企业管家。&#x27;,</span><br><span class="line">                //icon:&#x27;./ioc/ls.ico&#x27;,</span><br><span class="line">                noLink:true,</span><br><span class="line">              &#125;</span><br><span class="line">              dialog.showMessageBox(dopt,function(e)&#123;</span><br><span class="line">                 console.log(&#x27;e:&#x27;,e)</span><br><span class="line">                 if(e==0)&#123;</span><br><span class="line">                    app.quit();  </span><br><span class="line">                 &#125;else&#123;</span><br><span class="line">                    console.log(&#x27;nat close&#x27;)</span><br><span class="line">                 &#125;</span><br><span class="line">                //   </span><br><span class="line">              &#125;)</span><br><span class="line">                    </span><br><span class="line">        &#125;&#125;</span><br><span class="line">    ])</span><br><span class="line">    tray.setToolTip(&#x27;邻盛企业管家 你的企业好帮手！&#x27;)</span><br><span class="line">    tray.setContextMenu(contextMenu)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// This method will be called when Electron has finished</span><br><span class="line">// initialization and is ready to create browser windows.</span><br><span class="line">// Some APIs can only be used after this event occurs.</span><br><span class="line">app.on(&#x27;ready&#x27;, createWindow)</span><br><span class="line"></span><br><span class="line">// Quit when all windows are closed.</span><br><span class="line">app.on(&#x27;window-all-closed&#x27;, function() &#123;</span><br><span class="line">    // On OS X it is common for applications and their menu bar</span><br><span class="line">    // to stay active until the user quits explicitly with Cmd + Q</span><br><span class="line">    if (process.platform !== &#x27;darwin&#x27;) &#123;</span><br><span class="line">        app.quit()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(&#x27;activate&#x27;, function() &#123;</span><br><span class="line">    // On OS X it&#x27;s common to re-create a window in the app when the</span><br><span class="line">    // dock icon is clicked and there are no other windows open.</span><br><span class="line">    if (mainWindow === null) &#123;</span><br><span class="line">        createWindow()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//登录窗口最小化</span><br><span class="line">ipcMain.on(&#x27;window-min&#x27;,function()&#123;</span><br><span class="line">  mainWindow.minimize();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//重新设置大小</span><br><span class="line">ipcMain.on(&#x27;window-reset&#x27;,function()&#123;</span><br><span class="line">  console.log(initobj.width, initobj.height)</span><br><span class="line"></span><br><span class="line">  mainWindow.setSize(initobj.width, initobj.height)</span><br><span class="line">  mainWindow.center()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//登录窗口最大化</span><br><span class="line">ipcMain.on(&#x27;window-max&#x27;,function(data)&#123;</span><br><span class="line"></span><br><span class="line">  console.log(&#x27;data&#x27;,data)</span><br><span class="line"></span><br><span class="line">  if(mainWindow.isMaximized())&#123;</span><br><span class="line">      mainWindow.restore();  </span><br><span class="line">  &#125;else&#123;</span><br><span class="line">      mainWindow.maximize(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ipcMain.on(&#x27;window-close&#x27;,function()&#123;</span><br><span class="line">  mainWindow.close();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 检查登陆</span><br><span class="line">ipcMain.on(&#x27;islogin&#x27;,function()&#123;</span><br><span class="line">           session.defaultSession.cookies.get(&#123;url:domain,name:&#x27;sns_username&#x27;&#125;, function(error, cookies) &#123;</span><br><span class="line">                 let  domainObj=cookies                             </span><br><span class="line">                 // console.log(&#x27;ddd&#x27;,domainObj[0].value)</span><br><span class="line">                 mainWindow.webContents.send(&#x27;islogin&#x27;,domainObj)</span><br><span class="line">           &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">// 检查网络</span><br><span class="line">ipcMain.on(&#x27;testNetwork&#x27;,function()&#123;</span><br><span class="line">           request(options, function (err, res, body) &#123;</span><br><span class="line">            if (err) &#123;</span><br><span class="line">              console.log(err)</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">              mainWindow.webContents.send(&#x27;testNetwork&#x27;,body)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">// 注销登陆</span><br><span class="line">ipcMain.on(&#x27;loginout&#x27;,function()&#123;</span><br><span class="line">    session.defaultSession.cookies.get(&#123;url:domain&#125;, function(error, cookies) &#123;</span><br><span class="line"></span><br><span class="line">                       let  domainObj=cookies</span><br><span class="line">                       for (var i in domainObj)&#123;</span><br><span class="line">                         console.log(i,&#x27;:&#x27;,domainObj[i])</span><br><span class="line">                         session.defaultSession.cookies.remove(domain,domainObj[i].name, function(data) &#123;</span><br><span class="line">                                       console.log(&#x27;remove&#x27;,data);</span><br><span class="line">                          &#125;);</span><br><span class="line">                         </span><br><span class="line">                       &#125;</span><br><span class="line">                       //console.log(&#x27;ddd&#x27;,domainObj)</span><br><span class="line">      &#125;);</span><br><span class="line">    //app.quit();</span><br><span class="line">    //mainWindow.loadURL(loginpath)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 消息通知 函数</span><br><span class="line">function notifly(title,body,ico)&#123;</span><br><span class="line">  const opt = &#123;</span><br><span class="line">      icon: ico,</span><br><span class="line">      title: title,</span><br><span class="line">      body: body,              </span><br><span class="line">  &#125;</span><br><span class="line">  const m = new Notification(opt);</span><br><span class="line">  m.show()</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 可点击事件的通知</span><br><span class="line">function notiflyclick(title,body,callback)&#123;</span><br><span class="line">   notify(title, &#123; body: body &#125;, () =&gt; &#123;</span><br><span class="line">                    console.log(&#x27;The notification got clicked on!&#x27;)</span><br><span class="line">                    callback()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//自动获取图标</span><br><span class="line">function getico(path)&#123;</span><br><span class="line">  let str = path.substring(path.lastIndexOf(&quot;.&quot;)+1);</span><br><span class="line">  switch (str) &#123;</span><br><span class="line">    case &#x27;doc&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/doc.png&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;docx&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/doc.png&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;xls&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/excel.png&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;xlsx&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/excel.png&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;csv&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/excel.png&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;exe&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/exe.png&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;html&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/file_html.png&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;htm&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/file_html.png&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;pptx&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/ppt.png&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;ppx&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/ppt.png&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;rar&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/rar.png&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;zip&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/zip.png&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;gz&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/zip.png&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;tar&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/zip.png&#x27;;</span><br><span class="line">      break;</span><br><span class="line">    case &#x27;pdf&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/pdf.png&#x27;;</span><br><span class="line">      break;    </span><br><span class="line">     case &#x27;png&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/png.png&#x27;;</span><br><span class="line">      break;    </span><br><span class="line">     case &#x27;jpg&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/jpg.png&#x27;;</span><br><span class="line">      break;    </span><br><span class="line">     case &#x27;gif&#x27;:</span><br><span class="line">      return __dirname+&#x27;\\ioc/format/gif.png&#x27;;</span><br><span class="line">      break;    </span><br><span class="line">    default:</span><br><span class="line">       return __dirname+&#x27;\\ioc/format/file.png&#x27;;</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//================  升级</span><br><span class="line"></span><br><span class="line">autoUpdater.setFeedURL(&#x27;http://www.linksame.com/release/&#x27;);</span><br><span class="line">// 检测更新，在你想要检查更新的时候执行，renderer事件触发后的操作自行编写</span><br><span class="line">function updateHandle()&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    autoUpdater.on(&#x27;error&#x27;, function(error)&#123;</span><br><span class="line">      sendUpdateMessage(message.error)</span><br><span class="line">    &#125;);</span><br><span class="line">    autoUpdater.on(&#x27;checking-for-update&#x27;, function(info) &#123;</span><br><span class="line">      console.log(&#x27;checking for update:::&#x27;,info)</span><br><span class="line">      sendUpdateMessage(message.checking)</span><br><span class="line">    &#125;);</span><br><span class="line">    autoUpdater.on(&#x27;update-available&#x27;, function(info) &#123;</span><br><span class="line">        console.log(&#x27;update-available:::&#x27;,info)</span><br><span class="line">        upwin.webContents.send(&#x27;checkinfo&#x27;, info)</span><br><span class="line">        sendUpdateMessage(message.updateAva)</span><br><span class="line">    &#125;);</span><br><span class="line">    autoUpdater.on(&#x27;update-not-available&#x27;, function(info) &#123;</span><br><span class="line">        sendUpdateMessage(message.updateNotAva)</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    // 更新下载进度事件</span><br><span class="line">    autoUpdater.on(&#x27;download-progress&#x27;, function(progressObj) &#123;</span><br><span class="line">        console.log(&#x27;downloading:&#x27;,progressObj)</span><br><span class="line">        upwin.webContents.send(&#x27;downloadProgress&#x27;, progressObj)</span><br><span class="line">    &#125;)</span><br><span class="line">    autoUpdater.on(&#x27;update-downloaded&#x27;,  function (event, releaseNotes, releaseName, releaseDate, updateUrl, quitAndUpdate) &#123;</span><br><span class="line">        ipcMain.on(&#x27;isUpdateNow&#x27;, (e, arg) =&gt; &#123;</span><br><span class="line">            //some code here to handle event</span><br><span class="line">            autoUpdater.quitAndInstall();</span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(releaseNotes, releaseName, releaseDate, updateUrl, quitAndUpdate)</span><br><span class="line">        //upwin.webContents.send(&#x27;isUpdateNow&#x27;)</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    //执行自动更新检查</span><br><span class="line">    //autoUpdater.checkForUpdates();</span><br><span class="line">     ipcMain.on(&quot;checkForUpdate&quot;,()=&gt;&#123;</span><br><span class="line">          //执行自动更新检查 appUpdater.autoDownload = false</span><br><span class="line">          autoUpdater.checkForUpdates();</span><br><span class="line">          //console.log(&#x27;checkinfo:&#x27;,checkinfo)</span><br><span class="line">          </span><br><span class="line">      &#125;)</span><br><span class="line">     //执行下载</span><br><span class="line">    ipcMain.on(&quot;download&quot;,()=&gt;&#123;</span><br><span class="line">          autoUpdater.downloadUpdate()          </span><br><span class="line">      &#125;)</span><br><span class="line">     console.log(&#x27;now check updateing ~~~~&#x27;)</span><br><span class="line">     // autoUpdater.checkForUpdates();</span><br><span class="line"></span><br><span class="line">      //open upgroud dialog</span><br><span class="line">      const modalPath = path.join(&#x27;file://&#x27;, __dirname, &#x27;upgroud.html&#x27;)</span><br><span class="line">      //let win = new BrowserWindow(&#123; width: 705, height: 250,resizable:false,autoHideMenuBar:true,type: &#x27;desktop&#x27;, icon: &#x27;./ioc/download2.png&#x27; &#125;)</span><br><span class="line">      let upwin = new BrowserWindow(&#123; </span><br><span class="line">        width: 705, </span><br><span class="line">        height: 250,</span><br><span class="line">        autoHideMenuBar:true,</span><br><span class="line">        type: &#x27;desktop&#x27;, </span><br><span class="line">        icon: __dirname+&#x27;\\ioc\\upgrate2.png&#x27;,</span><br><span class="line">        resizable:false,</span><br><span class="line">        maximizable:false,</span><br><span class="line">         &#125;)</span><br><span class="line">      //win.setApplicationMenu(null);</span><br><span class="line">      upwin.on(&#x27;close&#x27;, function() &#123; </span><br><span class="line">          </span><br><span class="line">           upwin.webContents.send(&#x27;close&#x27;) </span><br><span class="line">           </span><br><span class="line">           //ipcMain.removeAllListeners([&quot;checkForUpdate&quot;, &quot;download&quot;, &quot;isUpdateNow&quot;])</span><br><span class="line">           upwin = null</span><br><span class="line">           //ipcRenderer.removeAll([&quot;checkForUpdate&quot;, &quot;download&quot;, &quot;isUpdateNow&quot;]);</span><br><span class="line">       &#125;)</span><br><span class="line">      upwin.loadURL(modalPath)</span><br><span class="line">      upwin.show()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 通过main进程发送事件给renderer进程，提示更新信息</span><br><span class="line">// mainWindow = new BrowserWindow()</span><br><span class="line">function sendUpdateMessage(text)&#123;</span><br><span class="line">    console.log(&#x27;text:&#x27;,text)</span><br><span class="line">    //mainWindow.webContents.send(&#x27;message&#x27;, text)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 第一次运行软件 判断网络</span><br><span class="line">function initview()&#123;</span><br><span class="line">                      </span><br><span class="line">&#125;</span><br><span class="line">// 自动随机检查升级包</span><br><span class="line">function checkUp()&#123;</span><br><span class="line">     let checkinfo=autoUpdater.checkForUpdates();</span><br><span class="line">     //console.log(&#x27;checkinfo:&#x27;,checkinfo)</span><br><span class="line">     checkinfo.then(function(data)&#123;</span><br><span class="line">        console.log(&#x27;data:::&#x27;,data.versionInfo.version)</span><br><span class="line">        if(data.versionInfo.version)&#123;</span><br><span class="line">            updateHandle();</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//checkUp();</span><br><span class="line">//随机时间执行检查升级</span><br><span class="line">let randoms=Math.round(Math.random()*9+1)*60000;</span><br><span class="line">console.log(&#x27;randoms=&#x27;,randoms)</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">  checkUp();</span><br><span class="line">&#125;,randoms)</span><br><span class="line">// hi i&#x27;m a vision 1.0.2 hahah</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 桌面开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 实现路由过渡动画</title>
      <link href="/blog/2025/09/12/Vue-%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/"/>
      <url>/blog/2025/09/12/Vue-%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>编写动画效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">.slide-right-enter-active,</span><br><span class="line">.slide-right-leave-active,</span><br><span class="line">.slide-left-enter-active,</span><br><span class="line">.slide-left-leave-active &#123;</span><br><span class="line">  will-change: transform;</span><br><span class="line">  transition: all 500ms;</span><br><span class="line">  position: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.slide-right-enter &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translate3d(-100%, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.slide-right-leave-active &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translate3d(100%, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.slide-left-enter &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translate3d(100%, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.slide-left-leave-active &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: translate3d(-100%, 0, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>为路由可能跳转到的组件添加索引，确保动画的过渡效果是有序的<br>在 meta 中可以添加自定义参数，此处添加 index 用于表示索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">children: [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;hot&#x27;,</span><br><span class="line">    name: &#x27;hot&#x27;,</span><br><span class="line">    component: hot,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      index: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;mooc&#x27;,</span><br><span class="line">    name: &#x27;mooc&#x27;,</span><br><span class="line">    component: mooc,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      index: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;self&#x27;,</span><br><span class="line">    name: &#x27;self&#x27;,</span><br><span class="line">    component: self,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      index: 2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;training/:id&#x27;,</span><br><span class="line">    name: &#x27;training&#x27;,</span><br><span class="line">    component: training,</span><br><span class="line">    props: true,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      index: 3</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在需要跳转的路由外层包裹 <transition> 组件<br>同时为组件指定可能执行的动画效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition :name=&quot;transitionName&quot;&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure><p>通过监听路由变化判断具体执行哪个动画<br>可以通过路由的参数获取到之前设置的索引，从而判断动画效果是向左还是向右</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  &#x27;$route&#x27; (to, from) &#123;</span><br><span class="line">    console.log(to)</span><br><span class="line">    let toName = to.name</span><br><span class="line"></span><br><span class="line">    const toIndex = to.meta.index</span><br><span class="line">    const fromIndex = from.meta.index</span><br><span class="line"></span><br><span class="line">    this.transitionName = toIndex &lt; fromIndex ? &#x27;slide-right&#x27; : &#x27;slide-left&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目使用Nginx部署指南</title>
      <link href="/blog/2025/09/12/Vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8Nginx%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/"/>
      <url>/blog/2025/09/12/Vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8Nginx%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="部署-Vue-项目"><a href="#部署-Vue-项目" class="headerlink" title="部署 Vue 项目"></a>部署 Vue 项目</h1><ol><li><p>构建 Vue 项目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>将生成的 dist 文件夹复制到 Nginx 的 html 目录中:</p><ul><li><p>默认路径: C:\nginx\html\dist</p></li><li><p>或者修改配置文件中的 root 指令指向您的实际路径</p></li></ul></li></ol><h1 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h1><ol><li><p>备份原始配置文件: C:\nginx\conf\nginx.conf</p></li><li><p>用下面的配置替换原文件内容</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">#windows版nginx配置文件</span><br><span class="line"># 用户设置（Windows中通常注释掉）</span><br><span class="line">#user  nobody;</span><br><span class="line"></span><br><span class="line"># 工作进程数（Windows中建议设置为1）</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"># 错误日志路径（Windows路径）</span><br><span class="line">error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line"># 进程ID文件</span><br><span class="line">pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"># 事件模块配置</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># HTTP主配置</span><br><span class="line">http &#123;</span><br><span class="line">    # 包含MIME类型定义</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # 日志格式</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    # 访问日志路径</span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    # 性能优化相关</span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush      on;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line">    # 连接超时时间</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    # Gzip压缩配置</span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;msie6&quot;;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    gzip_buffers 16 8k;</span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line">    # 服务器配置</span><br><span class="line">    server &#123;</span><br><span class="line">        # 监听端口</span><br><span class="line">        listen       80;</span><br><span class="line">        # 服务器名称（替换为您的域名或本地IP）</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        # Vue项目构建后的文件所在目录（请根据实际路径修改）</span><br><span class="line">        root   html;</span><br><span class="line">        # 默认文档</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        # 字符集</span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        # 静态资源缓存配置</span><br><span class="line">        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ &#123;</span><br><span class="line">            expires 1y;</span><br><span class="line">            add_header Cache-Control &quot;public, immutable&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 处理Vue Router History模式</span><br><span class="line">        location / &#123;</span><br><span class="line">            try_files $uri $uri/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 反向代理配置：将/prod-api代理到后端服务</span><br><span class="line">        location /prod-api/ &#123;</span><br><span class="line">            # 代理到后端服务</span><br><span class="line">            proxy_pass http://127.0.0.1:8080/;</span><br><span class="line">            # 代理请求头设置</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">            # 代理超时设置</span><br><span class="line">            proxy_connect_timeout 60s;</span><br><span class="line">            proxy_send_timeout 60s;</span><br><span class="line">            proxy_read_timeout 60s;</span><br><span class="line">            # 代理缓冲设置</span><br><span class="line">            proxy_buffering on;</span><br><span class="line">            proxy_buffer_size 4k;</span><br><span class="line">            proxy_buffers 8 4k;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 错误页面配置</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 可选：HTTPS配置（如果需要）</span><br><span class="line">    # server &#123;</span><br><span class="line">    #     listen       443 ssl;</span><br><span class="line">    #     server_name  localhost;</span><br><span class="line">    #</span><br><span class="line">    #     ssl_certificate      cert.pem;  # SSL证书路径</span><br><span class="line">    #     ssl_certificate_key  cert.key;  # SSL密钥路径</span><br><span class="line">    #</span><br><span class="line">    #     ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #     ssl_session_timeout  5m;</span><br><span class="line">    #</span><br><span class="line">    #     ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #     ssl_prefer_server_ciphers  on;</span><br><span class="line">    #</span><br><span class="line">    #     # 其余配置与HTTP服务器相同</span><br><span class="line">    #     location / &#123;</span><br><span class="line">    #         root   html;</span><br><span class="line">    #         index  index.html index.htm;</span><br><span class="line">    #     &#125;</span><br><span class="line">    # &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>linux版nginx配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">#linux版nginx配置文件</span><br><span class="line"># 定义用户和工作进程数</span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"># 事件模块配置</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">    use epoll;</span><br><span class="line">    multi_accept on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># HTTP主配置</span><br><span class="line">http &#123;</span><br><span class="line">    # 基础设置</span><br><span class="line">    include /etc/nginx/mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line">    # 日志格式</span><br><span class="line">    log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                   &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                   &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line">    access_log /var/log/nginx/access.log main;</span><br><span class="line">    # 性能优化相关</span><br><span class="line">    sendfile on;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    server_tokens off;</span><br><span class="line">    # Gzip压缩配置</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_disable &quot;msie6&quot;;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">    gzip_buffers 16 8k;</span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line">    # 服务器配置</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name your-domain.com www.your-domain.com; # 请替换为您的域名</span><br><span class="line">        root /usr/share/nginx/html; # Vue项目构建后的文件所在目录</span><br><span class="line">        index index.html index.htm;</span><br><span class="line"></span><br><span class="line">        # 安全相关头部</span><br><span class="line">        add_header X-Frame-Options SAMEORIGIN;</span><br><span class="line">        add_header X-Content-Type-Options nosniff;</span><br><span class="line">        add_header X-XSS-Protection &quot;1; mode=block&quot;;</span><br><span class="line"></span><br><span class="line">        # 静态资源缓存</span><br><span class="line">        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ &#123;</span><br><span class="line">            expires 1y;</span><br><span class="line">            add_header Cache-Control &quot;public, immutable&quot;;</span><br><span class="line">            try_files $uri $uri/ =404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 处理Vue Router History模式</span><br><span class="line">        location / &#123;</span><br><span class="line">            try_files $uri $uri/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 反向代理配置：将/prod-api代理到后端服务</span><br><span class="line">        location /prod-api/ &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:8080/; # 注意结尾的斜杠，确保路径正确传递</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line"></span><br><span class="line">            # 可选：代理超时设置</span><br><span class="line">            proxy_connect_timeout 60s;</span><br><span class="line">            proxy_send_timeout 60s;</span><br><span class="line">            proxy_read_timeout 60s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 错误页面配置</span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root /usr/share/nginx/html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 禁止访问隐藏文件</span><br><span class="line">        location ~ /\. &#123;</span><br><span class="line">            deny all;</span><br><span class="line">            access_log off;</span><br><span class="line">            log_not_found off;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 可选的HTTPS配置（如果需要）</span><br><span class="line">    # server &#123;</span><br><span class="line">    #     listen 443 ssl http2;</span><br><span class="line">    #     server_name your-domain.com www.your-domain.com;</span><br><span class="line">    #</span><br><span class="line">    #     ssl_certificate /path/to/your/certificate.crt;</span><br><span class="line">    #     ssl_certificate_key /path/to/your/private.key;</span><br><span class="line">    #</span><br><span class="line">    #     # SSL配置（使用现代安全设置）</span><br><span class="line">    #     ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line">    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line">    #     ssl_prefer_server_ciphers off;</span><br><span class="line">    #</span><br><span class="line">    #     # 其余配置与HTTP服务器相同</span><br><span class="line">    #     # ...</span><br><span class="line">    #</span><br><span class="line">    #     # 强制HTTP重定向到HTTPS（可选）</span><br><span class="line">    #     # if ($scheme != &quot;https&quot;) &#123;</span><br><span class="line">    #     #     return 301 https://$host$request_uri;</span><br><span class="line">    #     # &#125;</span><br><span class="line">    # &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>根据您的实际路径修改 root 指令:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果您的Vue项目构建文件在D盘的vue-app目录</span><br><span class="line">root   D:/vue-app/dist;</span><br></pre></td></tr></table></figure></li><li>启动和测试 Nginx<br>4.1. 打开命令提示符(CMD)或PowerShell<br>4.2. 切换到 Nginx 目录:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd C:\nginx</span><br></pre></td></tr></table></figure>4.3 启动 Nginx:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start nginx</span><br></pre></td></tr></table></figure>4.4 测试配置是否正确:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>4.5 重新加载配置(修改配置后):<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>4.6 停止 Nginx:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure></li><li>验证部署<br>5.1 打开浏览器访问: <a href="http://localhost/">http://localhost</a><br>5.2 检查 Vue 应用是否正常加载<br>5.3 测试 API 代理是否工作:<ul><li>访问: <a href="http://localhost/prod-api/xxx">http://localhost/prod-api/xxx</a></li><li>应该被代理到: <a href="http://127.0.0.1:8080/xxx">http://127.0.0.1:8080/xxx</a></li></ul></li></ol><h1 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h1><ol><li><p>端口占用问题:<br>如果80端口被占用，可以修改监听端口:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen       8080;  # 改为其他端口</span><br></pre></td></tr></table></figure><p>然后通过 <a href="http://localhost:8080/">http://localhost:8080</a> 访问</p></li><li><p>文件路径问题:<br>Windows 路径使用正斜杠 &#x2F; 或双反斜杠 \<br>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root   C:/nginx/html/dist;  # 正斜杠</span><br><span class="line">root   C:\\nginx\\html\\dist;  # 双反斜杠</span><br></pre></td></tr></table></figure></li><li><p>权限问题:<br>以管理员身份运行命令提示符<br>或者将 Nginx 安装到用户有写入权限的目录</p></li><li><p>代理不工作:<br>确保后端服务运行在 <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a><br>检查防火墙是否阻止了连接</p></li></ol><blockquote><p>这个配置文件已经针对 Windows 环境进行了优化，可以直接使用。根据您的实际项目路径和后端服务地址进行适当调整即可。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NGINX </tag>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat下部署vue项目[history模式]</title>
      <link href="/blog/2025/09/12/Tomcat%E4%B8%8B%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE-history%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2025/09/12/Tomcat%E4%B8%8B%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE-history%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>项目发布后通常有两种访问方式，<br>第一种： IP+端口直接访问的方式，如 <a href="http://192.168.4.160:6090/">http://192.168.4.160:6090/</a><br>第二种：IP+端口+项目名，如 <a href="http://192.168.4.160:6090/huangshi/">http://192.168.4.160:6090/huangshi/</a></p><p>IP+端口的方式需要修改Tomcat -&gt; conf&#x2F;server.xml, 增加Context节点, 设置 docBase&#x3D;”&#x2F;huangshi” 其中的huangshi就是webapps目录下的项目名称（文件夹名）<Context docBase="/huangshi" path="" reloadable="true" /><br>如下图<br><img src="https://gitee.com/saver-live/cdn/raw/master/images/3f5ac631-2991-6e9f-f3f0-883450ae8011.png" alt="图片"><br>IP+端口+项目名 这种方式的部署需要在vue项目源码上作些修改<br>首先 路由的配置上，增加 base:’项目名称’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const router = new Router(&#123;</span><br><span class="line">  base: &#x27;huangshi&#x27;,</span><br><span class="line">   mode: &#x27;history&#x27;,</span><br><span class="line">  linkActiveClass: &#x27;active&#x27;,</span><br><span class="line">  linkExactActiveClass: &#x27;active&#x27;,</span><br><span class="line">  routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><p>其次修改 vue.config.js,增加publicPath配置项，如果没有这个文件，手动增加<br>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: 8888,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">         target: &#x27;http://192.168.4.189:8085/api&#x27;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &#x27;^/api&#x27;: &#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">  publicPath:&#x27;huangshi&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为是history模式, 要防止在路由下刷新变成404错误，这需要让tomcat都定位到首页，也就是index.html页， 在项目目录下新建WEB-INF文件夹， 接着在WEB-INF文件夹下新建 web.xml文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee</span><br><span class="line">           http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span><br><span class="line">  version=&quot;3.1&quot; metadata-complete=&quot;true&quot;&gt;</span><br><span class="line">  &lt;display-name&gt;Router for Tomcat&lt;/display-name&gt;</span><br><span class="line">  &lt;error-page&gt;</span><br><span class="line">    &lt;error-code&gt;404&lt;/error-code&gt;</span><br><span class="line">    &lt;location&gt;/index.html&lt;/location&gt;</span><br><span class="line">  &lt;/error-page&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>大致意思就是 服务端404时就去到index.html页，这样客户端的history模式路由就会生效。</p><blockquote><p>通常更建议使用nginx部署vue项目</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的几个正则表达式(匹配数字)</title>
      <link href="/blog/2025/09/12/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E5%8C%B9%E9%85%8D%E6%95%B0%E5%AD%97/"/>
      <url>/blog/2025/09/12/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E5%8C%B9%E9%85%8D%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-常见基础匹配"><a href="#一、-常见基础匹配" class="headerlink" title="一、 常见基础匹配"></a>一、 常见基础匹配</h1><table><thead><tr><th>模式</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>.(点号)</td><td>匹配任意单个字符（除了换行符 \n）。</td><td>a.c 匹配 “abc”, “a1c”, “a-c”</td></tr><tr><td>\d</td><td>匹配一个数字字符。等价于 [0-9]。</td><td>\d\d 匹配 “12”, “05”</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于 [^0-9]。</td><td>\D\D 匹配 “ab”, “#!”</td></tr><tr><td>\w</td><td>匹配字母、数字、下划线。等价于 [A-Za-z0-9_]。</td><td>\w\w 匹配 “Ab”, “12”, “_a”</td></tr><tr><td>\W</td><td>匹配非字母、数字、下划线。等价于 [^A-Za-z0-9_]。</td><td>\W 匹配 “@”, “ “, “.”</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等。</td><td>a\sb 匹配 “a b”</td></tr><tr><td>\S</td><td>匹配任何非空白字符。</td><td>a\Sb 匹配 “aBb”, “a1b”</td></tr><tr><td>\n</td><td>匹配一个换行符。</td><td></td></tr><tr><td>\t</td><td>匹配一个制表符。</td><td></td></tr></tbody></table><h1 id="二、-位置匹配（锚点）"><a href="#二、-位置匹配（锚点）" class="headerlink" title="二、 位置匹配（锚点）"></a>二、 位置匹配（锚点）</h1><table><thead><tr><th>模式</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>^</td><td>匹配字符串的开始位置。</td><td>^Hello 匹配 “Hello World” 中的 “Hello”</td></tr><tr><td>$</td><td>匹配字符串的结束位置。</td><td>World$ 匹配 “Hello World” 中的 “World”</td></tr><tr><td>\b</td><td>匹配一个单词的边界（单词的开头或结尾）。</td><td>\bcat\b 匹配 “a cat” 中的 “cat”，但不匹配 “category”</td></tr></tbody></table><h1 id="三、-数量词（匹配次数）"><a href="#三、-数量词（匹配次数）" class="headerlink" title="三、 数量词（匹配次数）"></a>三、 数量词（匹配次数）</h1><table><thead><tr><th>模式</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>*</td><td>匹配前面的子表达式零次或多次。</td><td>ab*c 匹配 “ac”, “abc”, “abbc”</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。</td><td>ab+c 匹配 “abc”, “abbc”，但不匹配 “ac”</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。</td><td>colou?r 匹配 “color” 和 “colour”</td></tr><tr><td>{n}</td><td>匹配确定的 n 次。</td><td>\d{4} 匹配 “1234”, “2023”</td></tr><tr><td>{n,}</td><td>匹配至少 n 次。</td><td>\d{2,} 匹配 “12”, “123”, “1234”</td></tr><tr><td>{n,m}</td><td>匹配至少 n 次，最多 m 次。</td><td>\d{2,4} 匹配 “12”, “123”, “1234”</td></tr><tr><td>默认是贪婪匹配（匹配尽可能长的字符串），在数量词后加 ? 可改为惰性匹配（匹配尽可能短的字符串）。</td><td></td><td></td></tr></tbody></table><ul><li><p>.*：贪婪匹配任意字符</p></li><li><p>.*?：惰性匹配任意字符</p></li></ul><h1 id="四、-字符组"><a href="#四、-字符组" class="headerlink" title="四、 字符组"></a>四、 字符组</h1><table><thead><tr><th>模式</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>[abc]</td><td>匹配方括号内的任意一个字符。</td><td>[aeiou] 匹配 “hello” 中的 “e” 和 “o”</td></tr><tr><td>[a-z]</td><td>匹配指定范围内的任意一个字符。</td><td>[0-9] 等价于 \d</td></tr><tr><td>[^abc]</td><td>匹配不在方括号内的任意一个字符（取反）。</td><td>[^0-9] 等价于 \D</td></tr></tbody></table><h1 id="五、-分组与捕获"><a href="#五、-分组与捕获" class="headerlink" title="五、 分组与捕获"></a>五、 分组与捕获</h1><table><thead><tr><th>模式</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>(abc)</td><td>将多个字符作为一个分组（捕获组），并可引用它。</td><td>(abc)+ 匹配 “abc” 和 “abcabc”</td></tr><tr><td>(?:abc)</td><td>只分组，不捕获。提高效率，避免不必要的捕获。</td><td>(?:abc)+ 匹配 “abcabc”，但不会创建捕获组</td></tr></tbody></table><h1 id="六、-常用实用正则表达式"><a href="#六、-常用实用正则表达式" class="headerlink" title="六、 常用实用正则表达式"></a>六、 常用实用正则表达式</h1><ol><li><p>电子邮箱<br> 模式: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$</p><p> 说明: 匹配大多数常见邮箱格式。</p><p> 示例: <a href="mailto:&#117;&#115;&#101;&#114;&#x40;&#101;&#120;&#97;&#109;&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#109;">&#117;&#115;&#101;&#114;&#x40;&#101;&#120;&#97;&#109;&#x70;&#x6c;&#101;&#46;&#99;&#x6f;&#109;</a>, <a href="mailto:&#x66;&#105;&#114;&#x73;&#x74;&#46;&#108;&#x61;&#x73;&#116;&#43;&#108;&#97;&#x62;&#x65;&#108;&#64;&#115;&#117;&#x62;&#x2e;&#x64;&#x6f;&#x6d;&#x61;&#105;&#110;&#x2e;&#x63;&#x6f;&#x2e;&#117;&#x6b;">&#x66;&#105;&#114;&#x73;&#x74;&#46;&#108;&#x61;&#x73;&#116;&#43;&#108;&#97;&#x62;&#x65;&#108;&#64;&#115;&#117;&#x62;&#x2e;&#x64;&#x6f;&#x6d;&#x61;&#105;&#110;&#x2e;&#x63;&#x6f;&#x2e;&#117;&#x6b;</a></p><p> 注意: 这是一个“足够好”的版本，100%精准匹配所有合法邮箱的表达式极其复杂。</p></li><li><p>URL<br> 模式: https?:&#x2F;&#x2F;[^\s&#x2F;$.?#].[^\s]*</p><p> 说明: 匹配以 http:&#x2F;&#x2F; 或 https:&#x2F;&#x2F; 开头的简单 URL。</p><p> 示例: <a href="https://www.example.com/">https://www.example.com</a>, <a href="http://127.0.0.1:8000/path?query=value">http://127.0.0.1:8000/path?query=value</a></p><p> 更复杂的版本: ^(https?:&#x2F;&#x2F;)?([\da-z.-]+).([a-z.]{2,6})([&#x2F;\w .-]<em>)</em>&#x2F;?$</p></li><li><p>手机号码（中国大陆）<br> 模式: ^(?:(?:+|00)86)?1[3-9]\d{9}$</p><p> 说明: 匹配中国大陆手机号，可包含国际区号 +86 或 0086。</p><p> 示例: 13800138000, +8613800138000, 008613800138000</p></li><li><p>身份证号（中国大陆18位）<br> 模式: ^[1-9]\d{5}(18|19|20)\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$</p><p> 说明: 匹配18位身份证号，校验了日期和最后一位校验码的格式（但无法验证校验码是否正确）。</p><p> 示例: 11010519491231002X</p></li><li><p>IPv4 地址<br> 模式: ^((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d).){3}(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)$</p><p> 说明: 匹配合法的 IPv4 地址，每个数字在 0-255 之间。</p><p> 示例: 192.168.1.1, 127.0.0.1</p></li><li><p>日期 (YYYY-MM-DD)<br> 模式: ^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$</p><p> 说明: 匹配 YYYY-MM-DD 格式的日期，校验了月份和天数（但无法区分大小月，如2月30日也会匹配）。</p><p> 示例: 2023-10-01, 1999-02-28</p></li><li><p>强密码校验<br> 模式: ^(?&#x3D;.<em>[a-z])(?&#x3D;.</em>[A-Z])(?&#x3D;.<em>\d)(?&#x3D;.</em>[@$!%<em>?&amp;])[A-Za-z\d@$!%</em>?&amp;]{8,}$</p><p> 说明: 这是一个正向肯定预查的复杂例子。它要求密码必须包含：</p><p> 至少一个小写字母 (?&#x3D;.*[a-z])</p><p> 至少一个大写字母 (?&#x3D;.*[A-Z])</p><p> 至少一个数字 (?&#x3D;.*\d)</p><p> 至少一个特殊符号 (?&#x3D;.<em>[@$!%</em>?&amp;])</p><p> 总长度至少为8位 {8,}</p><p> 示例: Passw0rd!, Str0ngP@ss</p></li><li><p>匹配中文<br> 模式 (Unicode): [\u4e00-\u9fa5]</p><p> 说明: 匹配单个中文字符。大多数现代环境（如 JavaScript、Python3）都支持此方式。</p><p> 示例: [\u4e00-\u9fa5]+ 匹配 “你好世界”</p></li></ol><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><blockquote><p>转义 (Escape): 正则表达式中的特殊字符（如 ., *, ?, $）如果要想匹配它们自身，需要在前面加上反斜杠 \ 进行转义。例如，要匹配 example.com 中的点，需要用 example.com。</p></blockquote><blockquote><p>语言差异: 不同编程语言（Python, JavaScript, Java, PHP等）对正则表达式的支持和语法细节可能略有不同，使用时请查阅相关文档。</p></blockquote><blockquote><p>性能: 复杂的正则表达式（尤其是嵌套的量词和回溯）可能导致性能问题（称为“灾难性回溯”），在处理长文本时要特别注意。</p></blockquote><blockquote><p>在线工具: 强烈推荐使用 Regex101 或 RegExr 等在线工具来编写、测试和调试你的正则表达式。它们可以可视化解释你的表达式，并实时显示匹配结果。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>microsoft office url方案</title>
      <link href="/blog/2025/09/12/Microsoft-office-url%E6%96%B9%E6%A1%88/"/>
      <url>/blog/2025/09/12/Microsoft-office-url%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="https://docs.microsoft.com/en-us/office/client-developer/office-uri-schemes">https://docs.microsoft.com/en-us/office/client-developer/office-uri-schemes</a></p><h2 id="1-1摘要"><a href="#1-1摘要" class="headerlink" title="1.1摘要"></a>1.1摘要</h2><p>本文档定义了用于办公生产力应用程序的统一资源标识符（URI）的格式。Microsoft Office 2010 Service Pack 2和更高版本（包括Windows的Microsoft Office 2013和Microsoft SharePoint 2013产品）都支持该方案。iPhone版Office，iPad版Office和Mac版Office 2011也支持此功能。</p><h2 id="1-2引言"><a href="#1-2引言" class="headerlink" title="1.2引言"></a>1.2引言</h2><p>这些URI方案允许使用各种命令来调用Office生产力应用程序。每个应用程序都有不同的命名方案，但是所有方案都遵循相同的URI形成规则（URI架构）。</p><h2 id="1-3-URI模式"><a href="#1-3-URI模式" class="headerlink" title="1.3 URI模式"></a>1.3 URI模式</h2><p>完整架构<br>&lt; 方案名称 &gt;：&lt; 命令名称 &gt;“ |” &lt; 命令参数描述符 &gt;“ |” &lt; 命令参数 &gt;<br>本文档中定义的URI可能具有一个或多个命令参数，每个参数必须同时包含&lt; command-argument-descriptor &gt;和&lt; command-argument &gt;元素，并以竖线（“ |”）字符分隔。当URI中包含多个命令自变量时，必须有一个竖线（“ |”）字符将每个命令自变量与随后的命令自变量分隔开。<br>这些方案不包括RFC 3986第3.2节中定义的权限组件。本文档中指定的命令的调用发生在系统调用命令的上下文中。例如，从安装了Microsoft Office 2013的运行Microsoft Windows的个人计算机上调用URI“ ms-excel：ofv | u | https：&#x2F;&#x2F;contoso&#x2F;Q4&#x2F;budget.xls”时，预期结果是本地安装Microsoft Excel将启动并传递参数以在https：&#x2F;&#x2F;contoso&#x2F;Q4&#x2F;budget.xls打开文件 在只读模式下。请注意，在本规范中用作定界符的竖线不在RFC 3986第2.2节中标识为保留用作定界符的那些字符中。故意这样做是为了最大化URI命令参数可以支持的字符集，而无需对这些字符进行百分比编码。<br>方案语法包括以下内容：<br>&lt; scheme-name &gt;：这是指应调用的应用程序的类型。例如，ms-word：方案名称由Microsoft Word注册。<br>“：“ 分隔器<br>&lt; 命令名称 &gt;：这描述了应用程序应执行的操作。例如，打开文档进行查看。命令名列表在1.5节中描述。<br>“ |” （竖线）分隔符<br>&lt; command-argument-descriptor &gt;：此元素提供有关command参数所涉及内容的更多信息。<br>“ |” （竖线）分隔符<br>&lt; 命令参数 &gt;：参数根据命令而有所不同。一个常见的参数是文档的URI，通常使用http或https方案。请注意，在&lt; command-argument &gt;段中，RFC 3986保留字符“：”和“ &#x2F;”是参数数据的一部分，而不是定界符，因此未转义包括在内。<br>简图<br>Office URI方案的缩写形式允许更紧凑的请求来启动指定的Office应用程序以打开位于给定URI的资源。此缩写形式表示&lt; 命令名称 &gt;“ ofv”和&lt; 命令参数描述符 &gt;“ u”。此架构中不允许其他命令或命令参数。<br>&lt; 方案名称 &gt;：&lt; 命令参数 &gt;<br>&lt; scheme-name &gt;：应被调用的应用程序的类型。例如ms-word：用于Microsoft Word。<br>&lt; 命令参数 &gt;：应用程序应打开的资源的URI。当前仅支持基于http或https方案的URI。</p><h2 id="1-4方案名称和办公室申请注册"><a href="#1-4方案名称和办公室申请注册" class="headerlink" title="1.4方案名称和办公室申请注册"></a>1.4方案名称和办公室申请注册</h2><p>以下是在Microsoft Office应用程序中实现的方案名称的列表。安装Microsoft Office时，每个方案名称都会在Windows中注册，并由具有相同名称的Office产品处理。请注意，“ ms-spd”是SharePoint Designer的缩写。<br>字词：<br>ms-powerpoint：<br>ms-excel：<br>ms-visio：<br>ms-access：<br>ms-project：<br>ms发布者：<br>ms-spd：<br>ms-infopath：</p><h2 id="1-5命令和所需的命令参数"><a href="#1-5命令和所需的命令参数" class="headerlink" title="1.5命令和所需的命令参数"></a>1.5命令和所需的命令参数</h2><p>查看文件<br>以下命令将导致应用程序以只读或查看模式打开URI引用的文档。<br>命令名称：ofv<br>命令参数描述符：u<br>命令参数：基于http或https方案的文档URI<br>示例： ms-excel：ofv | u | https：&#x2F;&#x2F;contoso&#x2F;Q4&#x2F;budget.xls<br>编辑文件<br>以下命令将使应用程序在编辑模式下打开URI引用的文档。<br>命令名称：ofe<br>命令参数描述符：u<br>命令参数：基于http或https方案的文档URI<br>示例： ms-powerpoint：ofe | u | https：&#x2F;&#x2F;<a href="http://www.fourthcoffee.com/AllHandsDeck.ppt">www.fourthcoffee.com/AllHandsDeck.ppt</a><br>模板中的新文档<br>以下命令将使应用程序根据存储在指定URI上的模板创建并打开一个新文档。在此过程中，不会修改模板文件。可以提供一个附加的命令参数，以指定首次保存文件时作为保存位置提供的默认路径。用户可以选择其他位置。<br>命令名称：nft<br>命令参数描述符1：u<br>命令参数1：基于http或https方案的模板URI<br>可选的命令参数描述符2：s<br>可选命令参数2：用于指定默认保存文件夹的URI<br>例如： ms-word：nft | u | https：&#x2F;&#x2F;cohowinery&#x2F;templates&#x2F;elegance.pot | s | https：&#x2F;&#x2F; cohowinery &#x2F; presentations<br>注意，如果提供了可选的默认保存位置，则它必须指向与模板相同的主机名。<br>此外，SharePoint Designer和InfoPath应用程序（分别实现ms-spd：方案和ms-infopath：方案）不支持“来自模板的新文档”功能。</p><h2 id="1-6向后兼容性"><a href="#1-6向后兼容性" class="headerlink" title="1.6向后兼容性"></a>1.6向后兼容性</h2><p>解析URI以提取给定命令的适当命令参数时，Office URI处理程序将仅使用具有预期命令参数描述符的命令参数。如果还有其他对的参数和参数描述符具有意外的参数描述符，则会将其从URI中删除。此机制允许该方案的未来版本添加其他命令参数，而不会破坏与该方案的旧版实现的向后兼容性。</p><h2 id="1-7命令参数的实施限制"><a href="#1-7命令参数的实施限制" class="headerlink" title="1.7命令参数的实施限制"></a>1.7命令参数的实施限制</h2><p>在Office 2013的当前实现中，命令自变量具有以下限制。<br>URI命令参数的长度限制<br>对于URI命令参数，除Excel外，所有应用程序的最大路径长度均为256个字符，Excel的最大限制为216个字符。逐个应用程序可能支持大于这些长度的路径，建议在部署任何依赖于此的解决方案之前进行测试在此。<br>URI命令参数中允许的字符<br>允许的URI必须符合RFC 3987-国际化资源标识符（IRI）中提出的标准。RFC 3986中标识为保留的字符不应进行百分比编码。。文件名不得包含以下任何字符：\ &#x2F;：？&lt;&gt; | “ 要么 *。  <br>附录A-MS-WORD方案的URI方案注册模板</p><ul><li>A-3。URI方案语法<br>Word Scheme &#x3D;“ ms-word：” open-for-edit-cmd | 打开查看cmd | 模板新命令<br>open-for-edit-cmd &#x3D;“ ofe | u |” uri文件<br>open-for-view-cmd &#x3D;“ ofv | u |” uri文件<br>new-from-template-cmd &#x3D;“ nft | u |” template-uri [“ | s |” 保存位置]<br>document-uri &#x3D;要打开的文档的URI位置<br>template-uri &#x3D;新文件所基于的模板文件的URI位置<br>save-location &#x3D;应在其中创建新文档的文件夹的URI位置</li><li>A-4。URI方案语义<br>ms字方案定义了用于打开或创建字处理文档的URI语法。该方案定义了三个命令，这些命令用作有关参考文档应执行的操作的说明。这些命令是：1）open-for-edit-cmd（ofe），它指示文字处理应用程序以指定的URI打开文档进行编辑；2）open-for-view-cmd（ofv），它指示文字处理应用程序以只读模式以指定的URI打开文档；3）new-from-template-cmd（nft），它指示文字处理应用程序根据位于指定template-uri URI上的文档模板创建新文档，并将新文档保存在可选的保存位置URI，或者在没有该可选URI的情况下位于默认文档库位置。</li><li>A-5。使用ms字URI方案的应用程序&#x2F;协议<br>Microsoft Office 2013使用ms-word URI方案调用带有Service Pack 2的Microsoft Word 2013或Microsoft Word2010。MicrosoftSharePoint 2013使用ms-word URI作为指向存储在SharePoint文档库中的文字处理文档的链接。</li><li>A-6。互操作性注意事项<br>请注意，在本规范中用作定界符的竖线不在RFC 3986第2.2节中标识为保留用作定界符的那些字符中。这样做是为了最大程度地实现URI命令参数可以支持的字符集，而无需需要对这些字符进行百分比编码。<br>在&lt; command-argument &gt;段中，RFC 3986保留字符“：”和“ &#x2F;”是参数数据的一部分，而不是定界符，因此不加转义。</li><li>A-7。安全注意事项<br>在已注册了可识别ms-word URI并对其执行操作的处理程序的系统上，单击指向ms-word URI的链接将导致启动已注册的文字处理应用程序，并向该文字处理应用程序发出指令以尝试打开文档在指定的URI。注册以处理ms-word URI的字处理应用程序应实施保护措施，以防止从可能包含恶意代码的不受信任的远程系统打开文档。</li><li>A-8。参考文献<br>RFC 3987-国际资源标识符（IRI）  <br>附录B-MS-POWERPOINT方案的URI方案注册模板</li><li>B-3。URI方案语法<br>PowerPoint方案&#x3D;“ ms-powerpoint：”打开编辑cmd | 打开查看cmd | 模板新命令<br>open-for-edit-cmd &#x3D;“ ofe | u |” uri文件<br>open-for-view-cmd &#x3D;“ ofv | u |” uri文件<br>new-from-template-cmd &#x3D;“ nft | u |” template-uri [“ | s |” 保存位置]<br>document-uri &#x3D;要打开的文档的URI位置<br>template-uri &#x3D;新文件所基于的模板文件的URI位置<br>save-location * &#x3D;应在其中创建新文档的文件夹的URI位置</li></ul><ul><li>save-location是可选参数</li></ul><ul><li>B-4。URI方案语义<br>ms-powerpoint方案定义了用于打开或创建演示文稿文档的URI语法。该方案定义了三个命令，这些命令用作有关参考文档应执行的操作的说明。这些命令是：1）open-for-edit-cmd（ofe），它指示演示应用程序以指定的URI打开文档进行编辑；2）open-for-view-cmd（ofv），它指示演示应用程序以只读模式以指定的URI打开文档；3）new-from-template-cmd（nft），它指示演示文稿应用程序基于位于指定template-uri URI处的文档模板创建新文档，并将新文档保存在可选文档中指定的位置保存位置URI，或者在没有该可选URI的情况下，位于默认文档库位置。</li><li>B-5。使用ms-powerpoint URI方案的应用程序&#x2F;协议<br>Microsoft Office 2013使用ms-powerpoint URI方案调用带Service Pack 2的Microsoft PowerPoint 2013或Microsoft PowerPoint2010。MicrosoftSharePoint 2013使用ms-powerpoint URI作为指向存储在SharePoint文档库中的演示文稿文档的链接。</li><li>B-6。互操作性注意事项<br>请注意，在本规范中用作定界符的竖线不在RFC 3986第2.2节中标识为保留用作定界符的那些字符中。故意这样做是为了最大化URI命令参数可以支持的字符集，而无需对这些字符进行百分比编码。<br>在&lt; command-argument &gt;段中，RFC 3986保留字符“：”和“ &#x2F;”是参数数据的一部分，而不是定界符，因此不加转义。</li><li>B-7。安全注意事项<br>在已注册用于识别ms-powerpoint URI并对其进行操作的处理程序的系统上，单击指向ms-powerpoint URI的链接将导致注册的演示文稿应用程序启动，并带有指示该应用程序尝试在指定的位置打开文档的说明。 URI。注册以处理ms-powerpoint URI的应用程序应实施保护措施，以防止从可能包含恶意代码的不受信任的远程系统打开文档。</li><li>B-8。参考文献<br>RFC 3987-国际资源标识符（IRI）  <br>附录C-MS-EXCEL方案的URI方案注册模板</li><li>C-3。URI方案语法<br>Excel Scheme &#x3D;“ ms-excel：”打开编辑cmd | 打开查看cmd | 模板新命令<br>open-for-edit-cmd &#x3D;“ ofe | u |” uri文件<br>open-for-view-cmd &#x3D;“ ofv | u |” uri文件<br>new-from-template-cmd &#x3D;“ nft | u |” template-uri [“ | s |” 保存位置]<br>document-uri &#x3D;要打开的文档的URI位置<br>template-uri &#x3D;新文件所基于的模板文件的URI位置<br>save-location * &#x3D;应在其中创建新文档的文件夹的URI位置</li></ul><ul><li>save-location是可选参数</li></ul><ul><li>C-4。URI方案语义<br>ms-excel方案定义了用于打开或创建电子表格文档的URI语法。该方案定义了三个命令，这些命令用作有关参考文档应执行的操作的说明。这些命令是：1）open-for-edit-cmd（ofe），它指示电子表格应用程序以指定的URI打开文档进行编辑；2）open-for-view-cmd（ofv），它指示电子表格应用程序以只读模式以指定的URI打开文档；3）new-from-template-cmd（nft），它指示电子表格应用程序根据位于指定template-uri URI处的文档模板创建新文档，并将新文档保存在可选文档中指定的位置保存位置URI，或者在没有该可选URI的情况下，位于默认文档库位置。</li><li>C-5。使用ms-excel URI方案的应用程序&#x2F;协议<br>Microsoft Office 2013使用ms-excel URI方案来调用带有Service Pack 2的Microsoft Excel 2013或Microsoft Excel2010。MicrosoftSharePoint 2013使用ms-excel URI作为指向存储在SharePoint文档库中的电子表格文档的链接。</li><li>C-6。互操作性注意事项<br>请注意，在本规范中用作定界符的竖线不在RFC 3986第2.2节中标识为保留用作定界符的那些字符中。故意这样做是为了最大化URI命令参数可以支持的字符集，而无需对这些字符进行百分比编码。<br>在&lt; command-argument &gt;段中，RFC 3986保留字符“：”和“ &#x2F;”是参数数据的一部分，而不是定界符，因此不加转义。</li><li>C-7。安全注意事项<br>在已注册了可识别ms-excel URI并对其执行操作的处理程序的系统上，单击指向ms-excel URI的链接将导致启动已注册的电子表格应用程序，并带有指示该应用程序尝试在指定的位置打开文档的说明。 URI。注册以处理ms-excel URI的应用程序应实施保护措施，以防止从可能包含恶意代码的不受信任的远程系统打开文档。</li><li>C-8。参考文献<br>RFC 3987-国际资源标识符（IRI）  <br>附录D-MS-VISIO方案的URI方案注册模板</li><li>D-3。URI方案语法<br>Visio方案&#x3D;“ ms-visio：”打开编辑cmd | 打开查看cmd | 模板新命令<br>open-for-edit-cmd &#x3D;“ ofe | u |” uri文件<br>open-for-view-cmd &#x3D;“ ofv | u |” uri文件<br>new-from-template-cmd &#x3D;“ nft | u |” template-uri [“ | s |” 保存位置]<br>document-uri &#x3D;要打开的文档的URI位置<br>template-uri &#x3D;新文件所基于的模板文件的URI位置<br>save-location * &#x3D;应在其中创建新文档的文件夹的URI位置</li></ul><ul><li>save-location是可选参数</li></ul><ul><li>D-4。URI方案语义<br>ms-visio方案定义了用于打开或创建Microsoft Visio文档的URI语法。该方案定义了三个命令，这些命令用作有关参考文档应执行的操作的说明。这些命令是：1）open-for-edit-cmd（ofe），它指示Visio以指定的URI打开文档进行编辑；2）open-for-view-cmd（ofv），指示Visio以只读模式在指定的URI中打开文档；和3）new-from-template-cmd（nft），它指示Visio根据位于指定template-uri URI上的文档模板创建一个新文档，并将新文档保存在可选的save-中指定的位置。位置URI，或者在没有该可选URI的情况下，位于默认文档库位置。</li><li>D-5。使用ms-visio URI方案的应用程序&#x2F;协议<br>Microsoft Office 2013使用ms-visio URI方案来调用带有Service Pack 2的Microsoft Visio 2013或Microsoft Visio2010。MicrosoftSharePoint 2013使用ms-visio URI作为指向存储在SharePoint文档库中的Visio文档的链接。</li><li>D-6。互操作性注意事项<br>请注意，在本规范中用作定界符的竖线不在RFC 3986第2.2节中标识为保留用作定界符的那些字符中。故意这样做是为了最大化URI命令参数可以支持的字符集，而无需对这些字符进行百分比编码。<br>在&lt; command-argument &gt;段中，RFC 3986保留字符“：”和“ &#x2F;”是参数数据的一部分，而不是定界符，因此不加转义。</li><li>D-7。安全注意事项<br>在已注册了可识别ms-visio URI并对其执行操作的处理程序的系统上，单击指向ms-visio URI的链接将导致启动已注册的应用程序，并带有指示该应用程序尝试在指定URI上打开文档的说明。 。注册以处理ms-visio URI的应用程序应实施保护措施，以防止从可能包含恶意代码的不受信任的远程系统打开文档。</li><li>D-8。参考文献<br>RFC 3987-国际资源标识符（IRI）<br>附录E-MS访问方案的URI方案注册模板</li><li>E-3。URI方案语法<br>访问方案&#x3D;“ ms-access：” open-for-edit-cmd | 打开查看cmd | 模板新命令<br>open-for-edit-cmd &#x3D;“ ofe | u |” uri文件<br>open-for-view-cmd &#x3D;“ ofv | u |” uri文件<br>new-from-template-cmd &#x3D;“ nft | u |” template-uri [“ | s |” 保存位置]<br>document-uri &#x3D;要打开的文档的URI位置<br>template-uri &#x3D;新文件所基于的模板文件的URI位置<br>save-location * &#x3D;应在其中创建新文档的文件夹的URI位置</li></ul><ul><li>save-location是可选参数</li></ul><ul><li>E-4。URI方案语义<br>ms-access方案定义了用于打开或创建数据库的URI语法。该方案定义了三个命令，这些命令用作有关对引用的数据库文件应执行的操作的说明。这些命令是：1）open-for-edit-cmd（ofe），它指示数据库应用程序以指定的URI打开数据库以进行编辑；2）open-for-view-cmd（ofv），它指示数据库应用程序以只读模式以指定的URI打开数据库；3）new-from-template-cmd（nft），它指示数据库应用程序基于位于指定template-uri URI处的模板创建一个新数据库，并将新数据库保存在可选保存中指定的位置-location URI，或者在没有该可选URI的情况下，位于默认文档库位置。</li><li>E-5。使用ms-access URI方案的应用程序&#x2F;协议<br>Microsoft Office 2013使用ms-access URI方案从网页调用Microsoft Access 2013或Microsoft Access 2010 Service Pack 2。Microsoft SharePoint 2013使用ms-access URI作为指向存储在SharePoint文档库中的Access数据库的链接。</li><li>E-6。互操作性注意事项<br>请注意，在本规范中用作定界符的竖线不在RFC 3986第2.2节中标识为保留用作定界符的那些字符中。故意这样做是为了最大化URI命令参数可以支持的字符集，而无需对这些字符进行百分比编码。在<command-argument>段中，RFC 3986保留字符“：”和“ &#x2F;”是参数数据的一部分，而不是定界符，因此不加转义。</li><li>E-7。安全注意事项<br>在已注册了可识别ms-access URI并对其进行操作的处理程序的系统上，单击指向ms-access URI的链接将导致启动已注册的应用程序，并向该应用程序发出指令，以尝试以指定的URI打开数据库。 。注册以处理ms-access URI的应用程序应实施保护措施，以防止从可能包含恶意代码的不受信任的远程系统打开数据库。</li><li>E-8。参考文献<br>RFC 3987-国际资源标识符（IRI）  <br>附录F-MS项目计划的URI计划注册模板</li><li>F-3。URI方案语法<br>项目计划&#x3D;“ ms-project：” open-for-edit-cmd | 打开查看cmd | 模板新命令<br>open-for-edit-cmd &#x3D;“ ofe | u |” uri文件<br>open-for-view-cmd &#x3D;“ ofv | u |” uri文件<br>new-from-template-cmd &#x3D;“ nft | u |” template-uri [“ | s |” 保存位置]<br>document-uri &#x3D;要打开的文档的URI位置<br>template-uri &#x3D;新文件所基于的模板文件的URI位置<br>save-location * &#x3D;应在其中创建新文档的文件夹的URI位置</li></ul><ul><li>save-location是可选参数</li></ul><ul><li>F-4。URI方案语义<br>ms-project方案定义了用于打开或创建Microsoft Project文档的URI语法。该方案定义了三个命令，这些命令用作有关参考文档应执行的操作的说明。这些命令是：1）open-for-edit-cmd（ofe），它指示Project以指定的URI打开文档进行编辑；2）open-for-view-cmd（ofv），指示Project以只读模式在指定URI处打开文档；和3）new-from-template-cmd（nft），它指示Project根据位于指定template-uri URI上的文档模板创建新文档，并将新文档保存在可选的save-中指定的位置。位置URI，或者在没有该可选URI的情况下，位于默认文档库位置。<br>F-5。使用ms-project URI方案的应用程序&#x2F;协议<br>Microsoft Office 2013使用ms-project URI方案从网页调用Microsoft Project 2013。Microsoft SharePoint 2013使用ms-project URI作为指向存储在SharePoint文档库中的Project文档的链接。</li><li>F-6。互操作性注意事项<br>请注意，在本规范中用作定界符的竖线不在RFC 3986第2.2节中标识为保留用作定界符的那些字符中。故意这样做是为了最大化URI命令参数可以支持的字符集，而无需对这些字符进行百分比编码。<br>在&lt; command-argument &gt;段中，RFC 3986保留字符“：”和“ &#x2F;”是参数数据的一部分，而不是定界符，因此不加转义。</li><li>F-7。安全注意事项<br>在已注册了可识别ms-project URI并对其进行操作的处理程序的系统上，单击指向ms-project URI的链接将导致已注册的应用程序启动，并带有指示该应用程序尝试以指定URI打开文档的说明。 。注册以处理ms-project URI的应用程序应实施保护措施，以防止从可能包含恶意代码的不受信任的远程系统打开文档。</li><li>F-8。参考文献<br>RFC 3987-国际资源标识符（IRI）  <br>附录G-MS-PUSCHISHER方案的URI方案注册模板</li><li>G-3。URI方案<br>语法Publisher Scheme &#x3D;“ ms-publisher：” open-for-edit-cmd | 打开查看cmd | 模板新命令<br>open-for-edit-cmd &#x3D;“ ofe | u |” uri文件<br>open-for-view-cmd &#x3D;“ ofv | u |” uri文件<br>new-from-template-cmd &#x3D;“ nft | u |” template-uri [“ | s |” 保存位置]<br>document-uri &#x3D;要打开的文档的URI位置<br>template-uri &#x3D;新文件所基于的模板文件的URI位置<br>save-location * &#x3D;应在其中创建新文档的文件夹的URI位置</li></ul><ul><li>save-location是可选参数</li></ul><ul><li>G-4。URI方案语义<br>ms-publisher方案定义了用于打开或创建Microsoft Publisher文档的URI语法。该方案定义了三个命令，这些命令用作有关参考文档应执行的操作的说明。这些命令是：1）open-for-edit-cmd（ofe），它指示Publisher在指定的URI上打开文档进行编辑；2）open-for-view-cmd（ofv），指示Publisher以只读模式在指定URI处打开文档；和3）new-from-template-cmd（nft），指示发布者根据位于指定template-uri URI上的文档模板创建新文档，并将新文档保存在可选的save-中指定的位置，位置URI，或者在没有该可选URI的情况下，位于默认文档库位置。</li><li>G-5。使用ms-publisher URI方案的应用程序&#x2F;协议<br>Microsoft Office 2013使用ms-publisher URI方案从网页调用Microsoft Publisher 2013或带有Service Pack 2的Microsoft Publisher 2010。Microsoft SharePoint 2013使用ms-publisher URI作为指向存储在SharePoint文档库中的Publisher文档的链接。</li><li>G-6。互操作性注意事项<br>请注意，在本规范中用作定界符的竖线不在RFC 3986第2.2节中标识为保留用作定界符的那些字符中。故意这样做是为了最大化URI命令参数可以支持的字符集，而无需对这些字符进行百分比编码。在<command-argument>段中，RFC 3986保留字符“：”和“ &#x2F;”是参数数据的一部分，而不是定界符，因此不加转义。<br>7国集团。安全注意事项<br>在已注册处理程序以识别ms-publisher URI并对其执行操作的系统上，单击指向ms-publisher URI的链接将导致已注册的应用程序启动，并带有指示该应用程序尝试以指定URI打开文档的说明。 。注册以处理ms-publisher URI的应用程序应实施保护措施，以防止从可能包含恶意代码的不受信任的远程系统打开文档。<br>9国集团 参考文献<br>RFC 3987-国际资源标识符（IRI）  <br>附录H-MS-SPD方案的URI方案注册模板</li><li>H-3。URI方案语法<br>SharePoint Designer方案&#x3D;“ ms-spd：” open-for-edit-cmd<br>open-for-edit-cmd &#x3D;“ ofe | u |” uri文件<br>document-uri &#x3D;要打开的文档的URI位置</li><li>H-4。URI方案语义<br>ms-spd方案定义了用于打开Microsoft SharePoint Designer文档的URI语法。该方案定义了两个命令，这些命令用作有关参考文档应执行的操作的说明。这些命令是：1）open-for-edit-cmd（ofe），它指示SharePoint Designer在指定的URI上打开文档进行编辑；2）open-for-view-cmd（ofv），它指示SharePoint Designer以只读模式在指定的URI上打开文档。</li><li>H-5。使用ms-spd URI方案的应用程序&#x2F;协议<br>Microsoft Office 2013使用ms-spd URI方案从网页调用Microsoft SharePoint Designer 2013。Microsoft SharePoint 2013使用ms-spd URI作为指向存储在SharePoint文档库中的SharePoint Designer文档的链接。</li><li>H-6。互操作性注意事项<br>请注意，在本规范中用作定界符的竖线不在RFC 3986第2.2节中标识为保留用作定界符的那些字符中。故意这样做是为了最大化URI命令参数可以支持的字符集，而无需对这些字符进行百分比编码。<br>在&lt; command-argument &gt;段中，RFC 3986保留字符“：”和“ &#x2F;”是参数数据的一部分，而不是定界符，因此不加转义。</li><li>H-7。安全注意事项<br>在已注册了可识别ms-spd URI并对其执行操作的处理程序的系统上，单击指向ms-spd URI的链接将导致已注册的应用程序启动，并带有指示该应用程序尝试以指定URI打开文档的说明。 。注册以处理ms-spd URI的应用程序应实施保护措施，以防止从可能包含恶意代码的不受信任的远程系统打开文档。</li><li>H-8。参考文献<br>RFC 3987-国际资源标识符（IRI）  <br>附录I-MS-INFOPATH方案的URI方案注册模板</li><li>I-3。URI方案语法<br>信息路径方案&#x3D;“ ms-信息路径：” open-for-edit-cmd | 打开查看cmd<br>open-for-edit-cmd &#x3D;“ ofe | u |” uri文件<br>open-for-view-cmd &#x3D;“ ofv | u |” uri文件<br>document-uri &#x3D;要打开的文档的URI位置</li><li>I-4。URI方案语义<br>ms-infopath方案定义了用于打开或创建Microsoft Infopath文档的URI语法。该方案定义了两个命令，这些命令用作有关参考文档应执行的操作的说明。这些命令是：1）open-for-edit-cmd（ofe），它指示Visio以指定的URI打开文档进行编辑；2）open-for-view-cmd（ofv），它指示Visio以只读模式在指定的URI上打开文档。</li><li>I-5。使用ms-infopath URI方案的应用程序&#x2F;协议<br>Microsoft Office 2013使用ms-infopath URI方案从网页调用Microsoft Infopath 2013。Microsoft SharePoint 2013使用ms-infopath URI作为指向存储在SharePoint文档库中的Infopath文档的链接。</li><li>I-6。互操作性注意事项<br>请注意，在本规范中用作定界符的竖线不在RFC 3986第2.2节中标识为保留用作定界符的那些字符中。故意这样做是为了最大化URI命令参数可以支持的字符集，而无需对这些字符进行百分比编码。<br>在&lt; command-argument &gt;段中，RFC 3986保留字符“：”和“ &#x2F;”是参数数据的一部分，而不是定界符，因此不加转义。</li><li>I-7。安全注意事项<br>在已注册了可识别ms-infopath URI并对其执行操作的处理程序的系统上，单击指向ms-infopath URI的链接将导致启动已注册的应用程序，并带有指示该应用程序尝试以指定URI打开文档的说明。 。注册以处理ms-infopath URI的应用程序应实施保护措施，以防止从可能包含恶意代码的不受信任的远程系统打开文档。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 修改密码加密方式</title>
      <link href="/blog/2025/09/12/MYSQL-%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F/"/>
      <url>/blog/2025/09/12/MYSQL-%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>Mysql 安装完客户端连接报错：“Authentication plugin ‘caching_sha2_password’ cannot be loaded: ”</p><p>意思是客户端不支持caching_sha2_password的加密方式。</p><h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">select user,plugin from user ;</span><br></pre></td></tr></table></figure><p>可以看到root用户的加密方式为caching_sha2_password</p><p>这样的话有两种办法可以解决问题：</p><h2 id="一、升级客户端支持caching-sha2-password方式，没有采用。"><a href="#一、升级客户端支持caching-sha2-password方式，没有采用。" class="headerlink" title="一、升级客户端支持caching_sha2_password方式，没有采用。"></a>一、升级客户端支持caching_sha2_password方式，没有采用。</h2><p>我使用第二种方法：</p><h2 id="二、修改密码加密方式，改成mysql-native-password"><a href="#二、修改密码加密方式，改成mysql-native-password" class="headerlink" title="二、修改密码加密方式，改成mysql_native_password"></a>二、修改密码加密方式，改成mysql_native_password</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;; </span><br></pre></td></tr></table></figure><p>然后修改密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD FOR &#x27;root&#x27;@&#x27;localhost&#x27; = PASSWORD(&#x27;newpassword&#x27;);  </span><br></pre></td></tr></table></figure><p>或者执行命令flush privileges使权限配置项立即生效。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 设置数据库表名不区分大小写</title>
      <link href="/blog/2025/09/12/MySQL-%E8%AE%BE%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%90%8D%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99/"/>
      <url>/blog/2025/09/12/MySQL-%E8%AE%BE%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%90%8D%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>MySQL数据库</p><p>表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只<br>出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。 <br>说明：MySQL 在Windows 下不区分大小写，但在 Linux下默认是区分大小写。因此，数据库</p><p>名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。</p><p>一般情况下 Linux 服务器默认安装 MySQL 的数据库表名是区分大小写的，如果CentOS上安装的 MySQL 不支持表名区分大小下，则按照如下方法操作即可：<br>用 root 登录，修改 &#x2F;etc&#x2F;my.cnf （注意：以实际 my.cnf 配置文件路径为准）<br>在 [mysqld] 节点下，加入一行： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lower_case_table_names=1</span><br></pre></td></tr></table></figure><p>重启 MySQL 即可；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%case%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/saver-live/cdn/raw/master/images/e840f56d-3ba6-005c-8741-255c94cce669.png" alt="图片"><br>出现如上图所示，则表示修改成功！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL全表扫描的原因</title>
      <link href="/blog/2025/09/12/MySQL%E5%85%A8%E8%A1%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
      <url>/blog/2025/09/12/MySQL%E5%85%A8%E8%A1%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<p>全表扫描是数据库搜寻表的每一条记录的过程，直到所有符合给定条件的记录返回为止。通常在数据库中，对无索引的表进行查询一般称为全表扫描；然而有时候我们即便添加了索引，但当我们的SQL语句写的不合理的时候也会造成全表扫描。<br>以下是经常会造成全表扫描的SQL语句及应对措施： </p><h2 id="1-使用null做为判断条件"><a href="#1-使用null做为判断条件" class="headerlink" title="1. 使用null做为判断条件"></a>1. 使用null做为判断条件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如：select account from member where nickname = null;</span><br></pre></td></tr></table></figure><p>建议在设计字段时尽量将字段的默认值设为0，改为select account where nickname &#x3D; 0; </p><h2 id="2-左模糊查询Like-XXX"><a href="#2-左模糊查询Like-XXX" class="headerlink" title="2. 左模糊查询Like %XXX%"></a>2. 左模糊查询Like %XXX%</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如：select account from member where nickname like ‘%XXX%’ 或者 select account from member where nickname like ‘%XXX’</span><br></pre></td></tr></table></figure><p>建议使用select account from member where nickname like ‘XXX%’，如果必须要用到做查询，需要评估对当前表全表扫描造成的后果； 刘加东@酷听说 </p><h2 id="3-使用or做为连接条件"><a href="#3-使用or做为连接条件" class="headerlink" title="3. 使用or做为连接条件"></a>3. 使用or做为连接条件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如：select account from member where id = 1 or id = 2; </span><br></pre></td></tr></table></figure><p>建议使用union all,改为 select account from member where id &#x3D; 1 union all select account from member where id &#x3D; 2; </p><h2 id="4-使用in时-not-in"><a href="#4-使用in时-not-in" class="headerlink" title="4. 使用in时(not in)"></a>4. 使用in时(not in)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如：select account from member where id in (1,2,3) </span><br></pre></td></tr></table></figure><p>如果是连续数据，可以改为select account where id between 1 and 3;当数据较少时也可以参考union用法； <br>或者：select account from member where id in (select accountid from department where id &#x3D; 3 )，可以改为select account from member where id exsits (select accountid from department where id &#x3D; 3) <br>not in 可以对应 not exists; </p><h2 id="5-使用not-in时"><a href="#5-使用not-in时" class="headerlink" title="5.使用not in时"></a>5.使用not in时</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如select account where id not in (1,2,3) </span><br></pre></td></tr></table></figure><h2 id="6-使用！-或时"><a href="#6-使用！-或时" class="headerlink" title="6.使用！&#x3D;或&lt;&gt;时"></a>6.使用！&#x3D;或&lt;&gt;时</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">建议使用 &lt;,&lt;=,=,&gt;,&gt;=,between等； </span><br></pre></td></tr></table></figure><h2 id="7-对字段有操作时也会引起权标索引"><a href="#7-对字段有操作时也会引起权标索引" class="headerlink" title="7.对字段有操作时也会引起权标索引"></a>7.对字段有操作时也会引起权标索引</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如select account where salary * 0.8 = 1000 或者 select account where sustring(nickname,1,3) = ‘zhangxiaolong’; </span><br></pre></td></tr></table></figure><h2 id="8-使用count-时"><a href="#8-使用count-时" class="headerlink" title="8.使用count(*)时"></a>8.使用count(*)时</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如select count(*) from member； </span><br></pre></td></tr></table></figure><p>建议使用select count(1) from member; </p><h2 id="9-使用参数做为查询条件时"><a href="#9-使用参数做为查询条件时" class="headerlink" title="9.使用参数做为查询条件时"></a>9.使用参数做为查询条件时</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如select account from member where nickname = @name </span><br></pre></td></tr></table></figure><p>由于SQL语句在编译执行时并不确定参数，这将无法通过索引进行数据查询，所以尽量避免； 刘加东@酷听说<br>当不规范的写法造成全表扫描时，会造成CPU和内存的额外消耗，甚至会导致服务器崩溃。在团队协作中难免会遇到一些初学者，除了安排合理的任务外，资深的工程师也要做好Code Review。否则当我们有海量数据时，不规范的语句会带来很严重的后果，一定要慎重、慎重。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu中mysql安装失败</title>
      <link href="/blog/2025/09/12/Ubuntu%E4%B8%ADmysql%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5/"/>
      <url>/blog/2025/09/12/Ubuntu%E4%B8%ADmysql%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<p>在ubuntu中mysql安装失败后，卸载重新安装还是安装失败，之后找了资料说是卸载的不干净，然后进行下面操作，重新安装成功。</p><h2 id="解决办法如下："><a href="#解决办法如下：" class="headerlink" title="解决办法如下："></a>解决办法如下：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /var/lib/mysql/ -R</span><br><span class="line">sudo rm /etc/mysql/ -R</span><br><span class="line">sudo apt-get autoremove mysql* --purge</span><br><span class="line">sudo apt-get remove apparmor</span><br><span class="line">sudo apt-get install mysql-server mysql-common</span><br></pre></td></tr></table></figure><p>然后重新安装，一切OK。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL删除数据库时的错误（errno 39)</title>
      <link href="/blog/2025/09/12/MySQL%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E7%9A%84%E9%94%99%E8%AF%AF%EF%BC%88errno-39/"/>
      <url>/blog/2025/09/12/MySQL%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E7%9A%84%E9%94%99%E8%AF%AF%EF%BC%88errno-39/</url>
      
        <content type="html"><![CDATA[<p>由于mysql数据库是默认区分大小写的，部署的时候发现多了一些重复的表，于是就把多余的表删掉了。可是，剩下的重复的表再删除时会提示：表不存在。<br>于是，想把数据库删掉重新创建，可是，得到了 ERROR 1010 (HY000): Error dropping database (can’t rmdir ‘.&#x2F;tablename’, errno: 39)这样一个错误。</p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>删除&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;tablename下面的所有文件，不要删除tablename本身。然后再通过命令行drop database就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql Explain详解</title>
      <link href="/blog/2025/09/12/Mysql-Explain%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2025/09/12/Mysql-Explain%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>在日常工作中，我们会有时会开慢查询去记录一些执行时间比较久的SQL语句，找出这些SQL语句并不意味着完事了，些时我们常常用到explain这个命令来查看一个这些SQL语句的执行计划，查看该SQL语句有没有使用上了索引，有没有做全表扫描，这都可以通过explain命令来查看。所以我们深入了解MySQL的基于开销的优化器，还可以获得很多可能被优化器考虑到的访问策略的细节，以及当运行SQL语句时哪种策略预计会被优化器采用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 实际SQL，查找用户名为Jefabc的员工</span><br><span class="line">select * from emp where name = &#x27;Jefabc&#x27;;</span><br><span class="line">-- 查看SQL是否使用索引，前面加上explain即可</span><br><span class="line">explain select * from emp where name = &#x27;Jefabc&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/saver-live/cdn/raw/master/images/413b65b5-4cad-b955-3e87-0b604bb36ce1.png" alt="图片"><br>expain出来的信息有10列，分别是id、select_type、table、type、possible_keys、key、key_len、ref、rows、Extra</p><h2 id="概要描述："><a href="#概要描述：" class="headerlink" title="概要描述："></a>概要描述：</h2><p>id:选择标识符<br>select_type:表示查询的类型。<br>table:输出结果集的表<br>partitions:匹配的分区<br>type:表示表的连接类型<br>possible_keys:表示查询时，可能使用的索引<br>key:表示实际使用的索引<br>key_len:索引字段的长度<br>ref:列与索引的比较<br>rows:扫描出的行数(估算的行数)<br>filtered:按表条件过滤的行百分比<br>Extra:执行情况的描述和说明</p><h2 id="下面对这些字段出现的可能进行解释："><a href="#下面对这些字段出现的可能进行解释：" class="headerlink" title="下面对这些字段出现的可能进行解释："></a>下面对这些字段出现的可能进行解释：</h2><h2 id="一、-id"><a href="#一、-id" class="headerlink" title="一、 id"></a>一、 id</h2><p>SELECT识别符。这是SELECT的查询序列号<br>我的理解是SQL执行的顺序的标识，SQL从大到小的执行</p><ol><li>id相同时，执行顺序由上至下</li><li>如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</li><li>id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行<br>– 查看在研发部并且名字以Jef开头的员工，经典查询<br>explain select e.no, e.name from emp e left join dept d on e.dept_no &#x3D; d.no where e.name like ‘Jef%’ and d.name &#x3D; ‘研发部’;</li></ol><h2 id="二、select-type"><a href="#二、select-type" class="headerlink" title="二、select_type"></a>二、select_type</h2><p>      示查询中每个select子句的类型<br>(1) SIMPLE(简单SELECT，不使用UNION或子查询等)<br>(2) PRIMARY(子查询中最外层查询，查询中若包含任何复杂的子部分，最外层的select被标记为PRIMARY)<br>(3) UNION(UNION中的第二个或后面的SELECT语句)<br>(4) DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)<br>(5) UNION RESULT(UNION的结果，union语句中第二个select开始后面所有select)<br>(6) SUBQUERY(子查询中的第一个SELECT，结果不依赖于外部查询)<br>(7) DEPENDENT SUBQUERY(子查询中的第一个SELECT，依赖于外部查询)<br>(8) DERIVED(派生表的SELECT, FROM子句的子查询)<br>(9) UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行) </p><h2 id="三、table"><a href="#三、table" class="headerlink" title="三、table"></a>三、table</h2><p>显示这一步所访问数据库中表名称（显示这一行的数据是关于哪张表的），有时不是真实的表名字，可能是简称，例如上面的e，d，也可能是第几步执行的结果的简称 </p><h2 id="四、type"><a href="#四、type" class="headerlink" title="四、type"></a>四、type</h2><p>对表访问方式，表示MySQL在表中找到所需行的方式，又称“访问类型”。<br>常用的类型有： ALL、index、range、 ref、eq_ref、const、system、NULL（从左到右，性能从差到好）<br>ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行<br>index: Full Index Scan，index与ALL区别为index类型只遍历索引树<br>range:只检索给定范围的行，使用一个索引来选择行<br>ref: 表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值<br>eq_ref: 类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件<br>const、system: 当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量，system是const类型的特例，当查询的表只有一行的情况下，使用system<br>NULL: MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。 </p><h2 id="五、possible-keys"><a href="#五、possible-keys" class="headerlink" title="五、possible_keys"></a>五、possible_keys</h2><p>指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用（该查询可以利用的索引，如果没有任何索引显示 null）<br>该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。<br>如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询 </p><h2 id="六、Key"><a href="#六、Key" class="headerlink" title="六、Key"></a>六、Key</h2><p>key列显示MySQL实际决定使用的键（索引），必然包含在possible_keys中<br>如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。 </p><h2 id="七、key-len"><a href="#七、key-len" class="headerlink" title="七、key_len"></a>七、key_len</h2><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）<br>不损失精确性的情况下，长度越短越好  </p><h2 id="八、ref"><a href="#八、ref" class="headerlink" title="八、ref"></a>八、ref</h2><p>列与索引的比较，表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值 </p><h2 id="九、rows"><a href="#九、rows" class="headerlink" title="九、rows"></a>九、rows</h2><p> 估算出结果集行数，表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数 </p><h2 id="十、Extra"><a href="#十、Extra" class="headerlink" title="十、Extra"></a>十、Extra</h2><p>该列包含MySQL解决查询的详细信息,有以下几种情况：<br>Using where:不用读取表中所有信息，仅通过索引就可以获取所需数据，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤<br>Using temporary：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询，常见 group by ; order by<br>Using filesort：当Query中包含 order by 操作，而且无法利用索引完成的排序操作称为“文件排序”<br>– 测试Extra的filesort<br>explain select * from emp order by name;<br>Using join buffer：改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。<br>Impossible where：这个值强调了where语句会导致没有符合条件的行（通过收集统计信息不可能存在结果）。<br>Select tables optimized away：这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行<br>No tables used：Query语句中使用from dual 或不含任何from子句<br>– explain select now() from dual; </p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>• EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况<br>• EXPLAIN不考虑各种Cache<br>• EXPLAIN不能显示MySQL在执行查询时所作的优化工作<br>• 部分统计信息是估算的，并非精确值<br>• EXPALIN只能解释SELECT操作，其他操作要重写为SELECT后查看执行计划</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LVS DR模式+Nginx实现高可用集群</title>
      <link href="/blog/2025/09/12/LVS-DR%E6%A8%A1%E5%BC%8F-Nginx%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/"/>
      <url>/blog/2025/09/12/LVS-DR%E6%A8%A1%E5%BC%8F-Nginx%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>4台服务器<br>操作系统为欧拉<br>系统版本24.03-LTS-SP2-x86_64</p><h4 id="服务器与ip约定"><a href="#服务器与ip约定" class="headerlink" title="服务器与ip约定"></a>服务器与ip约定</h4><p>lvs master        DIP 192.168.29.8（内网ip<br>                  VIP 192.168.29.100(公网ip)</p><p>lvs backup        DIP 192.168.29.7（内网ip）<br>                  VIP 192.168.29.100(公网ip)</p><p>nginx1服务器       RIP 192.168.29.9（内网ip）<br>                  VIP 192.168.29.100</p><p>nginx2服务器       RIP 192.168.29.10（内网ip）<br>                  VIP 192.168.29.100</p><h4 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#旧CentOS/RHEL 7 及更早版本需要关闭NetworkManager，在新的系统版本中，不是要关闭 NetworkManager，而是要正确地配置它，使其行为像传统的静态网络一样稳定，避免它对LVS所需的特殊配置（如lo接口上的VIP）进行干扰。</span><br><span class="line">#当前的版本操作系统不需要执行下面内容，根据自己需求是否需要关闭</span><br><span class="line">sudo systemctl stop NetworkManager</span><br><span class="line">sudo systemctl disable NetworkManager</span><br></pre></td></tr></table></figure><ol><li>4台服务器都需要开放网络端口80和443</li></ol><blockquote><p>4台服务器均执行以下命令，永久添加 HTTP (80) 和 HTTPS (443) 端口规则：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --add-port=80/tcp</span><br><span class="line">sudo firewall-cmd --permanent --add-port=443/tcp</span><br><span class="line">#重新加载防火墙以使更改生效</span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line">#验证规则是否已成功添加：</span><br><span class="line">sudo firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><ol start="2"><li>配置lvs服务器虚拟ip，注如果是云服务器虚拟ip需要购买<br>在lvs服务下执行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts/</span><br><span class="line">cp ifcfg-ens33 ifcfg-ens33:1</span><br><span class="line">vi ifcfg-ens33:1</span><br></pre></td></tr></table></figure><p>ifcfg-ens33:1的内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO=static</span><br><span class="line">DEVICE=ens33:1</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.29.100</span><br><span class="line">PREFIX=24</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#保存退出后执行如下使其网络配置生效</span><br><span class="line">sudo ifdown ens33</span><br><span class="line">sudo ifup ens33</span><br></pre></td></tr></table></figure><ol start="3"><li>lvs master安装ipvsadm<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install ipvsadm</span><br></pre></td></tr></table></figure></li><li>配置 LVS 转发规则</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 清空现有规则</span><br><span class="line">sudo ipvsadm -C</span><br><span class="line"></span><br><span class="line"># 添加一个虚拟服务 (VIP:Port) 并使用调度算法 (-s)，这里用加权轮询 wrr</span><br><span class="line">sudo ipvsadm -A -t 192.168.29.100:80 -s wrr</span><br><span class="line"></span><br><span class="line"># 添加 Real Server 到虚拟服务中</span><br><span class="line"># -g 表示 DR 模式，-w 指定权重</span><br><span class="line">sudo ipvsadm -a -t 192.168.29.100:80 -r 192.168.29.9:80 -g -w 1</span><br><span class="line">sudo ipvsadm -a -t 192.168.29.100:80 -r 192.168.29.10:80 -g -w 2</span><br><span class="line"></span><br><span class="line"># 查看配置规则</span><br><span class="line">sudo ipvsadm -Ln</span><br></pre></td></tr></table></figure><ol start="5"><li>在两台nginx服务器上执行下面命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#安装nginx</span><br><span class="line">sudo yum install nginx</span><br><span class="line">#启动nginx</span><br><span class="line">systemctl start nginx</span><br><span class="line">#在nginx1下执行</span><br><span class="line">echo &quot;nginx 1&quot; &gt;&gt; /usr/share/nginx/html/index.html</span><br><span class="line">#在nginx2下执行</span><br><span class="line">echo &quot;nginx 2&quot; &gt;&gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><blockquote><p>浏览器访问192.168.29.9和192.168.29.10测试访问是否正常</p></blockquote><ol start="6"><li>配置2台nginx服务器回环接口（lo）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#创建 Systemd 服务文件：</span><br><span class="line">sudo vim /etc/systemd/system/add-loopback-ip.service</span><br></pre></td></tr></table></figure><p>将以下内容写入文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Add additional loopback IP</span><br><span class="line"># 在网络子系统启动之后、网络目标达成之前执行</span><br><span class="line">After=network.target</span><br><span class="line">Before=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line"># 要执行的核心命令</span><br><span class="line">ExecStart=/usr/sbin/ip addr add 192.168.29.100/32 dev lo</span><br><span class="line"># 服务执行完毕后，即使进程退出，系统也认为该服务处于活动状态</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"># 指定在系统进入多用户模式时启动此服务</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>重新加载 Systemd 配置并启用服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 让 Systemd 重新加载所有服务文件，识别我们刚创建的新服务</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"># 启用服务，使其在每次系统启动时自动运行</span><br><span class="line">sudo systemctl enable add-loopback-ip.service</span><br><span class="line"></span><br><span class="line"># 立即启动一次服务，无需重启系统就能看到效果</span><br><span class="line">sudo systemctl start add-loopback-ip.service</span><br></pre></td></tr></table></figure><p>验证结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看 lo 接口的IP地址，应该能看到 192.168.1.100</span><br><span class="line">ip addr show lo</span><br><span class="line"></span><br><span class="line"># 检查服务的运行状态，应该显示为 active (exited)</span><br><span class="line">systemctl status add-loopback-ip.service</span><br></pre></td></tr></table></figure><blockquote><p>简单直接的回答是：在现代的、使用 systemd-networkd 或 NetworkManager 的 Linux 发行版（包括欧拉 openEuler）中，回环接口 lo 不再由传统的 ifcfg-lo 文件管理，而是由 systemd 在系统启动时自动创建和配置。   <strong>需要更加自己的操作系统实现虚拟回环</strong> </p></blockquote><p>7.在两台nginx服务器上配置 VIP 到 Loopback 接口并隐藏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>内容追加如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.conf.all.arp_ignore = 1</span><br><span class="line">net.ipv4.conf.default.arp_ignore = 1</span><br><span class="line">net.ipv4.conf.lo.arp_ignore = 1</span><br><span class="line">net.ipv4.conf.all.arp_announce = 2</span><br><span class="line">net.ipv4.conf.default.arp_announce = 2</span><br><span class="line">net.ipv4.conf.lo.arp_announce = 2</span><br></pre></td></tr></table></figure><p>刷新配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>添加host路由</p><blockquote><p>告诉操作系统，所有发送到目标地址 192.168.29.100 的数据包，都通过本机的回环接口 lo 来发送和接收，而不是通过物理网卡（如 eth0 或 wlan0）发送到外部网络。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">route add -host 192.168.29.100 dev lo</span><br><span class="line">#开机自动添加</span><br><span class="line">echo &quot;route add -host 192.168.29.100 dev lo&quot; &gt;&gt; /etc/rc.local</span><br><span class="line">#查看是否添加成功</span><br><span class="line">route -n</span><br></pre></td></tr></table></figure><ol start="8"><li>lvs集群<blockquote><p>单当lvs如果发生宕机，会导致所有服务不可用，因此copy当前lvs服务器为新的lvs作为backup或者重复步骤2，3，4，其中两台lvs的dip不一致，vip地址需要一致<br>修改backup的lvs的dip地址</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts</span><br><span class="line">vi ifcfg-ens33</span><br></pre></td></tr></table></figure><p>修改IPADDR&#x3D;192.168.29.7后退出保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#重启网卡生效</span><br><span class="line">sudo ifdown ens33</span><br><span class="line">sudo ifup ens33</span><br></pre></td></tr></table></figure><ol start="9"><li>防火墙开放VRRP<blockquote><p>keepalived使用VRRP使用组播地址 224.0.0.18 进行心跳通信。如果防火墙阻挡了这些报文，两台机器都会认为对方宕机，从而都认为自己是MASTER。<br>两台lvs都需要执行以下操作</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 对于firewalld (CentOS/RHEL)</span><br><span class="line">sudo firewall-cmd --add-rich-rule=&#x27;rule protocol value=&quot;vrrp&quot; accept&#x27; --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"># 或者直接开放组播地址</span><br><span class="line">sudo firewall-cmd --add-rich-rule=&#x27;rule family=&quot;ipv4&quot; destination address=&quot;224.0.0.18&quot; accept&#x27; --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"># 临时测试：完全关闭防火墙</span><br><span class="line">sudo systemctl stop firewalld</span><br><span class="line"># 如果脑裂问题解决，就确认是防火墙问题</span><br></pre></td></tr></table></figure></li><li>安装keepalived<br>在两台lvs上都安装keepalived</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 1. 更新系统并安装必要的工具</span><br><span class="line">sudo yum update -y</span><br><span class="line">sudo yum install -y keepalived ipvsadm</span><br><span class="line"></span><br><span class="line"># 对于Ubuntu/Debian系统，使用：</span><br><span class="line"># sudo apt update</span><br><span class="line"># sudo apt install -y keepalived ipvsadm</span><br></pre></td></tr></table></figure><p>验证IPVS内核模块是否加载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep ip_vs</span><br></pre></td></tr></table></figure><p>如果没有任何输出，可以手动加载：sudo modprobe ip_vs。通常keepalived服务启动时会自动加载<br>11. 配置Keepalived<br>这是最核心的一步。我们需要在两台LVS服务器上分别编辑 &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf 文件。<br>在 LVS-Master (192.168.29.8) 上配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_MASTER</span><br><span class="line">    vrrp_version 3          # 建议使用VRRPv3，兼容性更好</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># VRRP实例配置 - VIP高可用</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33                  # 请确认您的实际网卡名称</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.29.100/24 dev ens33   # 明确指定网卡设备</span><br><span class="line">    &#125;</span><br><span class="line">    # 可选：启用不抢占模式</span><br><span class="line">    # nopreempt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 虚拟服务器配置 - LVS负载均衡</span><br><span class="line">virtual_server 192.168.29.100 80 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr                      # 轮询调度算法</span><br><span class="line">    lb_kind DR                      # 直接路由模式</span><br><span class="line">    protocol TCP</span><br><span class="line">    persistence_timeout 0           # 会话保持时间，0为禁用</span><br><span class="line"></span><br><span class="line">    # 真实服务器配置</span><br><span class="line">    real_server 192.168.29.9 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        # TCP健康检查 - v2.2.8语法</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3       # 连接超时时间（秒）</span><br><span class="line">            connect_port 80         # 连接端口</span><br><span class="line">            retry 3                 # 重试次数（不是nb_get_retry）</span><br><span class="line">            delay_before_retry 3    # 重试间隔（秒）</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    real_server 192.168.29.10 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            connect_port 80</span><br><span class="line">            retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 LVS-Backup (192.168.29.7) 上配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_BACKUP</span><br><span class="line">    vrrp_version 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP                     # 改为BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 90                      # 优先级低于MASTER</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.29.100/24 dev ens33</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 以下内容与MASTER节点完全相同</span><br><span class="line">virtual_server 192.168.29.100 80 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    protocol TCP</span><br><span class="line">    persistence_timeout 0</span><br><span class="line"></span><br><span class="line">    real_server 192.168.29.9 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            connect_port 80</span><br><span class="line">            retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    real_server 192.168.29.10 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            connect_port 80</span><br><span class="line">            retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="12"><li>检查配置文件语法：</li></ol><p><code>sudo keepalived -t</code><br>应该输出：Configuration is OK</p><p>启动服务：</p><p><code>sudo systemctl start keepalived</code><br>检查状态：</p><p><code>sudo systemctl status keepalived</code><br>查看VIP是否绑定：</p><p><code>ip addr show</code><br>检查IPVS规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo ipvsadm -Ln</span><br></pre></td></tr></table></figure><p>如果没有问题keepalived设置开机自启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable keepalived</span><br></pre></td></tr></table></figure><p>可以测试关闭其中lvs master后backup的网卡ip地址是否会自动绑定vip 192.168.29.100，正常情况是只有一台lvs的网卡会办的vip地址，如果发生了两台都绑定vip地址就是发生了脑裂。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LVS </tag>
            
            <tag> NGINX </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
